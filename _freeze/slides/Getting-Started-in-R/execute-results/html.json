{
  "hash": "99d99ba6d3d2b3fc1039edf77fa32962",
  "result": {
    "markdown": "---\ntitle: \"Getting Started in R\"\nauthor: \"Josh Allen\"\ninstitute: \"Department of Political Science at Georgia State University\"\ndate: \"2022-09-03\"\nformat: \n revealjs:\n   theme: [\"allen.scss\"]\n   code-overflow: wrap\n   \n---\n\n\n\n\n\n## Why Use R?\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](figs/grants-plot-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n\n:::{.notes}\n\nPart of this first portion is just a sales pitch. \n\nR is a vastly popular language in the datascience industry. While it is less popular than sequel or Python it is still one of the most heavily demanded language from private industry. \n\nThis sort of makes sense once we dig into what they are used for and who uses them. Sequel stands for structured query language. You have probably heard of big data before. Think of the amount of data you generate from what ever apps you use. Think about your use every minute. Now think about the N of people in this workshop. Now think about all the people at Georgia State. The amount of data being generated in a few minutes. The max storage of excel file 1,048,576 rows by 16,384 columns. We could all pretty quickly overwhelm a single excel file. Enter SQL you can store large data bases in SQL and just as importanly that is how you get that data. \n\n\nPython is a general purpose programming language it is used for data analysis as well but it has applications in everything from web development to game development. Dropbox is basically just a ton of python code. Lots of people who grow up to be data scientists come from a CS background where you are introduced to python pretty early. \n\nHowever, if you simply add up the propietary softwares there are fewer industry available jobs for you or you students compartively. \n\n\n:::\n\n\n## Why R and RStudio?(cont)\n\n### Data science reasons \n\n- Alongside Python, R has become the *de facto* language for data science.\n  - See: [*The Impressive Growth of R*](https://stackoverflow.blog/2017/10/10/impressive-growth-r/), [*The Popularity of Data Science Software*](http://r4stats.com/articles/popularity/)\n\n- Open-source (free!) with a global user-base spanning academia and industry.\n\n### Personal Benefits\n- The community is insanely nice\n  - Especially compared to Python and Stata\n  \n- A great \"first\" language to learn\n  - Source: [Google Data Analytics Professional Certificate](https://www.coursera.org/professional-certificates/google-data-analytics?irclickid=T1LQYH0NXxyNUwfyCLUQjRO9UkD3oW1kE3Q4100&irgwc=1&utm_medium=partners&utm_source=impact&utm_campaign=2946137&utm_content=b2c##faq)\n\n- Supports all types of statistical methods and data collection \n\n:::{.notes}\n\nIn the data science industry R has enjoyed similar growth rates to python in popularity. R is kind of quirky compartively to python for a whole host of computer sciency reasons and just path dependency. Whatever the case there is no denying that both are hugely in demand skills not just in Silicon Valley but at places that produce data analysis or data visualization\n\nR is also becoming wildly popular in econ and political science because not only is it free but it is a great skill to have given the difficulties of the academic job market. I am political scientist so I will mostly making these references. The Rstudio team in particular has worked really hard on adding support for Python, Julia, and java. \n\n\nMuch of this workshops materials are based on materials people publicly share as long as they get the proper acknowledment. Again thank you Grant.\n:::\n\n\n\n## R? Rstudio? Whats the Difference?\n\n- R is a statistical programming language\n- RStudio is a convenient interface for R (an Integrated Developer Environment, IDE)\n- At its simplest:\n    - R is like a car’s engine\n    - RStudio is like a car’s dashboard\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](pics/engine-dashboard.png){fig-align='center' width=100%}\n:::\n:::\n\n\n\n:::{.notes}\nThe most common way that we interact with R is through  Rstudio you can technically run R by just opening R and typing in code. But most people do not do this. It is not especially friendly to work in there is no syntax highlighting no code completetion. There isnt even really an option to add keyboard shortcuts. It is kind of like a nascar can go real fast but it is not a comfortable drive. \n\n\nRstudio has lots of handy features that help you. Much like a car. If we didnt have the dashboard but still had the engine and some wheels and a steering we could drive the car if needed. However a car with a dashboard lets us figure out what the car is doing more easily \n:::\n\n\n\n\n## I Have Downloaded Rstudio Now What? \n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](figs/script-new.png){fig-align='center' fig-alt='Opening an R script through drop down on the top left or command shift n on mac' width=60%}\n:::\n:::\n\n\n\n\n:::{.notes}\n\n\n\nHopefully You Have downloaded the Approriate Version of R and Rstudio for your Operating system. Now we need to know where we can start putting stuff. And it should look something like you can just start typing code into the console window if you want. But for the most part that is a bad idea. Because you will not be able to remember what you have done and more importantly you are going to have to redo it all each time. \n\n\nBest Practices are for you to work in an R script file. Later on in the semster we will hopefully have a workshop on getting started in Rmarkdown but for now just click on r script file if you are following along.\n\nIf you download the script for you will see lots of lots of # \nthese let you comment your code. That way you can let yourself or a reader know what you did.\n:::\n\n\n\n\n\n## Setting Your Working Directory\n\n- Your working directory is where all your files live\n\n- You may know where they are... \n\n- But R does not\n\n- If you want to use any data that does not come with a package you are going to need to tell R where it lives\n\n\n\n\n\n## Cats and Boxes\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](figs/cats-boxes.png){fig-align='center' width=30%}\n:::\n:::\n\n\n- You can put a box inside a box\n\n- You can put a cat inside a box\n\n- You can put a cat inside a box inside of a box\n\n- You cannot put a box inside a cat\n\n- You cannot put cat in a cat\n\n\n\n:::{.notes}\nHow working directories work is that they are comprised of files and folders. You need to let R know what file is in what folder.  You can also put a cat in a box, but you must never try to put a box in a cat. Boxes are like folders/directories, cats are like files. This sort of represents the hierarchy of this all. Folders come first than the last thing is the file itself \n\n\nWe are basically just telling R where things live. Kind of like how we put a strange address into the gps. We are telling it exactly where things live and what house number they are.\n\nWhen we organize our files into HW 1 or manuscript whatever name what we are doing is creating a new neighborhood on our computer. R will default to places it knows. Most commonly where it lives. In order to do something as simple as loading our dataset in R needs directions to this neighborhood\n\n\n:::\n\n\n\n## Setting Your Working Directory(cont)\n:::columns\n:::column\n### Seeing What Working Directory You are Using \n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ngetwd()## The working directory where all the materials for the workshops live\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"/Users/josh/Dropbox/Research-Data-Services-Workshops/research-data-services-r-workshops/slides\"\n```\n:::\n:::\n\n:::\n\n:::column\n\n### Setting Your Working Directory\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsetwd(\"your/working/directory/here/\") ## sets the working directory on mac\nsetwd(\"your\\working\\directory\\here\") ## sets the working directory on windows\n```\n:::\n\n\n:::\n:::\n\n:::{.notes}\n\nSo this is where the files for the workshop are living. The address is this file path right here. Once we set our working directory R will start trying to figure out where stuff is relative to this location. So if your data is in a folder named data in this working directoy you tell it that there is one additional turn to take and that is to the data folder. If the data is living in your downloads folder and your working directory is the one on the left. R is not going to know where the data is living and then return an error. This is kind of like when you give your friends directions and then tell them to call you if you get lost. That error message is R telling you that it is lost.\n\n\n:::\n\n\n\n\n## How To Make Your Life Easier \n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![source: Jenny Bryan](figs/projects-jenny-bryan.png){fig-align='center' width=50%}\n:::\n:::\n\n\n:::{.notes}\n\nWhile setting your working directory manually is fine it is a lot more fragile. If you collaborate with people now or in the future they are going to have to manually set the working directory on their computer. It is not neccessarily reproducible or practical for a variety of reasons. \n\n\n:::\n\n\n## How To Make Your Life Easier \n\n\n:::columns\n:::column \n\n### Working Directory for My Laptop\n```\n\"/Users/josh/Dropbox/Research-Data-Services-Workshops/research-data-services-r-workshops\" \n\n```\n\n::::\n\n:::column\n\n### Working Directory of My Office Computer\n```\n\"/Volumes/6TB Raid 10/Dropbox/Research-Data-Services-Workshops/research-data-services-r-workshops\"\n\n```\n:::\n:::\n\n\n:::{.notes}\n\nOften times collaborating with our selves is the first step. So these are two different working dirrectories I have. I could likely hack my way around it. However many of your colleagues that you work with do not have a similar set up. It is best to work in R projects.\n\n\nR projects are great because they will just set the working directory to wherever the project is living. The additional benefit is that it will restart R. Which is good because R will just keep lots of packages loaded in the background. This can cause what are called namespace conflicts. This used to be really bad with plyr and dplyr but plyr has since been retired. Truly problematic namespace conflicts are not something that I have experienced but they do happen. Fresh R sessions are the easiest way to avoid them\n:::\n\n\n## R Projects \n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](figs/r-projects-menu.png){fig-align='center' width=100%}\n:::\n:::\n\n\n\n## Objects\n\n- Everything is an object\n\n- Everything has a name \n\n- You do stuff with functions \n\n- Packages(i.e. libraries) are homes to pre-written functions.\n  - You can also write your own functions and in some cases should.\n\n\n\n\n:::{.notes}\nBefore we start R is an object oriented programming(sort of)  What this means is just how we are defining what things we have and how they relate to each other. A dog has various things associated with it. They are four legged have a good sense of smell, a member of the canine family, they eat a certain set of food. \n\nOnce we define what those things are and how they relate to each other R will figure out what class it is. What is this object to it. Once it figures this out this sets out strict limitations on what R can do with those objects but just as importantly it tells R what it can't do with those objects. Think of like a set of tricks or in CS speak methods to do things. There are things we can do with dogs or to dogs that are acceptable. This differs from cats. Cats and dogs have similar attributes but they are different. These are kind of like classes \n\n While sometimes it is frustrating because sometimes you just want to do a thing it helps you protect you from yourself. \n\n Returning back to our pet metaphor. Each pet has a name and the thing we want it to do has names. Sit, stay, come here, hey you what are you doing in there. These are sort of like functions. We are manipulating the object. \n\n\n:::\n\n\n## Install and loading packages\n\n- **Console or Script**  `install.packages(\"package-i-need-to-install\")`\n  - In the case of multiple packages you can do `install.packages(c(\"Packages\", \"I\", \"don't\",\"have\"))`\n\n- **RStudio** Click the \"Packages\" tab in the bottom-right window pane. Then click \"Install\" and search for these two packages.\n\n![](pics/install.gif)\n\n::: aside \nGif source: ![](https://grantmcdermott.com/)\n:::\n\n:::{.notes}\nCredit for the Gif goes to Grant Mcdermott. As we will learn there are lots of ways to do one thing in R and the packages that are loaded when you open up R have lots of important things that you will use to just do some simple analysis or if you want to build your own functions.\n:::\n\n\n## Install and load(cont.)\n\n Once the packages are installed we need load them into our `R` session with the  `library()` function \n \n \n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# We talk to ourselves using #\nlibrary(Package) \nlibrary(I)\nlibrary(JustInstalled)\n```\n:::\n\n \nNotice too that you don't need quotes around the package names any more. \n\n:::{.notes}\nReason: R now recognises these packages as defined objects with given names. (\"Everything in R is an object and everything has a name.\")\n:::\n\n\n\n\n\n## `R` Some Basics\n\n\n\n\n\n## Basic Maths\n\n- R is equipped with lots of mathematical operations \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n2+2 ## addition\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n\n```{.r .cell-code}\n4-2 ## subtaction\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n\n```{.r .cell-code}\n600*100 ##multiplication\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 60000\n```\n:::\n\n```{.r .cell-code}\n100/10 ##division\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10\n```\n:::\n\n```{.r .cell-code}\n10*10/(3^4*2)-2 ## Pemdas \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -1.382716\n```\n:::\n\n```{.r .cell-code}\nlog(100)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4.60517\n```\n:::\n\n```{.r .cell-code}\nsqrt(100)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10\n```\n:::\n:::\n\n\n\n\n:::{.notes}\nThe most common hazing ritual when learning R and object oriented programming is using R as calculator. Since we most often use it for advanced statistical analysis it should be able to handle lots things we can throw at it \n\n:::\n\n\n\n\n## Basic Maths\n\nR is also equipped with modulo operations (integer division and remainders), matrix algebra, etc\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n100 %/% 60 # How many whole hours in 100 minutes?\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\n100 %% 60 # How many minutes are left over?\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 40\n```\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nm <- matrix(1:8, nrow=2) # Don't worry about the <- for now \nn <- matrix(8:15, nrow=4) # this is just me creating matrices \n\nmat <- matrix(1:15, ncol = 5)\n\nm %*% n # Matrix multiplication\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2]\n[1,]  162  226\n[2,]  200  280\n```\n:::\n\n```{.r .cell-code}\nmat \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    1    4    7   10   13\n[2,]    2    5    8   11   14\n[3,]    3    6    9   12   15\n```\n:::\n\n```{.r .cell-code}\nt(mat) # transpose a matrix\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n[3,]    7    8    9\n[4,]   10   11   12\n[5,]   13   14   15\n```\n:::\n:::\n\n\n\n\n:::{.notes}\nThere are lots of other useful mathematical operations we can use in R to make our lives a lot easier or if you are in the postion of having to hand calculate them either because your professor is making you or you want to make sure your new cool estimator is available for other people to use you can do that. In this case we are doing this by \"hand\". \n:::\n\n\n## Logical Statements & Booleans\n\n\n<table>\n  <tr>\n    <th class=\"cell-center\">Test</th>\n    <th class=\"cell-left\">Meaning</th>\n    <th class=\"cell-center\">Test</th>\n    <th class=\"cell-left\">Meaning</th>\n  </tr>\n  <tr>\n    <td class=\"cell-center\"><code class=\"remark-inline-code\">x < y</code></td>\n    <td class=\"cell-left\">Less than</td>\n    <td class=\"cell-center\"><code class=\"remark-inline-code\">x %in% y</code></td>\n    <td class=\"cell-left\">In (group membership)</td>\n  </tr>\n  <tr>\n    <td class=\"cell-center\"><code class=\"remark-inline-code\">x > y</code></td>\n    <td class=\"cell-left\">Greater than</td>\n    <td class=\"cell-center\"><code class=\"remark-inline-code\">is.na(x)</code></td>\n    <td class=\"cell-left\">Is missing</td>\n  </tr>\n  <tr>\n    <td class=\"cell-center\"><code class=\"remark-inline-code\">==</code></td>\n    <td class=\"cell-left\">Equal to</td>\n    <td class=\"cell-center\"><code class=\"remark-inline-code\">!is.na(x)</code></td>\n    <td class=\"cell-left\">Is not missing</td>\n  </tr>\n  <tr>\n    <td class=\"cell-center\"><code class=\"remark-inline-code\">x <= y</code></td>\n    <td class=\"cell-left\">Less than or equal to</td>\n  </tr>\n  <tr>\n    <td class=\"cell-center\"><code class=\"remark-inline-code\">x >= y</code></td>\n    <td class=\"cell-left\">Greater than or equal to</td>\n  </tr>\n  <tr>\n    <td class=\"cell-center\"><code class=\"remark-inline-code\">x != y</code></td>\n    <td class=\"cell-left\">Not equal to</td>\n  </tr>\n  <tr>\n    <td class=\"cell-center\"><code class=\"remark-inline-code\">x | y</code></td>\n    <td class=\"cell-left\">Or </td>\n  </tr>\n  <tr>\n    <td class=\"cell-center\"><code class=\"remark-inline-code\">x & y</code></td>\n    <td class=\"cell-left\">And</td>\n  </tr>\n</table>\n\n\n\n\n:::{.notes}\nR comes with  standard set of boolean operators these are the common ones that you will use or run into in the wild. Note that to say something equals something because in R = is used in 2 different ways either as passing arguments off to a function or for assignment.\n:::\n\n\n\n## Booleans and Logicals in Action\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n1>2 \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\n1<2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n1 == 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\n1 < 2 | 3 > 4 ## only one test needs to true to return true\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n1 < 2 & 3>4 ## both tests must be true to return true\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n\n\n\n\n\n\n\n## Logicals, Booleans, and Precedence\n:::incremental\n\n- `R` like most other programming languages will evaluate our logical operators(`==`, `>`, etc) before our booleans(`|`, `&`, etc).\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n1 > 0.5 & 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\n\n\n- What's happening here is that R is evaluating two separate \"logical\" statements: \n - `1 > 0.5`, which is is obviously TRUE.\n - `2`, which is TRUE(!) because R is \"helpfully\" converting it to `as.logical(2)`.\n \n\n- It is way safer to make explicit what you are doing.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n1 > 0.5 & 1 > 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n\n:::\n\n:::{.notes}\nComputer operations have a pemdas of their own so when you are milling about in R it is important to remember how you set up your tests \n:::\n\n\n\n\n## Other Useful Tricks\n Value matching using `%in%`\n\n\nTo see whether an object is contained within (i.e. matches one of) a list of items, use `%in%`.\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n4 %in% 1:10\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n4 %in% 5:10\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n\n\n\n\n## Cool Now What?\n\n:::incremental\n\n- While this is boring it opens up lots \n\n\n- We may need to set up a group of tests to do something to data.\n\n\n- We may need all this math stuff to create new variables\n\n- However we need to ***Assign them*** to reuse them later in functions.\n  - Including datasets \n:::\n\n\n:::{.notes}\nR as a calculator and evaluating whether 1 is greater than 2 gets very tiring like as soon as you start doing it and is hardly ever that practical. \n:::\n\n\n# Everything is an Object\n<center>\n\n<div class=\"tenor-gif-embed\" data-postid=\"14066494\" data-share-method=\"host\" data-aspect-ratio=\"1.83908\" data-width=\"100%\"><a href=\"https://tenor.com/view/thanos-infinity-war-everything-avengers-gif-14066494\">Thanos Infinity War GIF</a>from <a href=\"https://tenor.com/search/thanos-gifs\">Thanos GIFs</a></div> <script type=\"text/javascript\" async src=\"https://tenor.com/embed.js\"></script>\n\n</center>\n\n\n## Assignment \n\n- The most popular assigment operator in R is `<-` which is just `<` followed by `-`\n  - read aloud as \"gets\"\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\na <- 2 + 2\n\na * 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 8\n```\n:::\n\n```{.r .cell-code}\nh <- \"harry potter\" # note that text needs to be wrapped in quotes \n```\n:::\n\n\n- You can also use `->` but this is far less common and makes me uncomfortable \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n a^2 -> b\n```\n:::\n\n\n\n:::{.notes}\n\nAssignment might be a foregin concept to you if you have no coding experience or making the transition from excel or stata. Basically if you go through and copy and paste all this stuff into an R script it will run but we will not be able to use this. \n\nSo using our friend gets we can assign 2 + 2 to a or in the parlance of R a gets 2 + 2 this lets us reuse it later whether we want to perform additional maths or use it for later\n:::\n\n\n\n## Assignment(cont)\n\n:::incremental\n\n- Using `=` as an assignment operator also works and is the one I tend to use \n  - Note: `=` is also used to evaluate arguments *within* functions\n  \n  \n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nb = b * 2\n\nd = b/3\n```\n:::\n\n\n\n- Tbh this is a matter of taste really. \n  - R added `=` in the 2000's to make it easier for people coming from other object oriented programming languages\n\n- Just keep it consistent..\n\n\n- Just keep it consistent..or become ungovernable and use all three in one script.\n  - I am not responsible for you getting yelled at on Stackoverflow if you do this.\n:::\n::: aside\nMore discussion [here](https://github.com/Robinlovelace/geocompr/issues/319##issuecomment-427376764) and [here](https://www.separatinghyperplanes.com/2018/02/why-you-should-use-and-never.html)\n:::\n:::{.notes}\n\nTo be honest R purists are one of the last hold outs of using the gets operator essentially back in the main frame computer days there was a physical key that would do this for you. R is actually really really old so there are some quirks to it that bug lots of people. We are not going to get into it any further in this workshop but if you have prior experience in an object oriented language R will be a bit peculiar at times. Like in somne cases position of the argument does not matter indentation does not matter which will really throw you off if you are coming from python or vice versa \n\n:::\n\n\n# Working with Objects \n\n- Lets just take the mean of a data frame \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ne = c(1,3,5,6,67,7)\n\nmean(e)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 14.83333\n```\n:::\n\n```{.r .cell-code}\ne = data.frame(x = 1:22,\n               y = 20:41)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmean(y)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in mean(y): object 'y' not found\n```\n:::\n:::\n\n\n\n\n\n\n\n\n## Global Environment(cont)\n:::incremental\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-error}\n```\nError in mean(y): object 'y' not found\n```\n:::\n:::\n\n\n- Gives us a hint out about what went wrong\n<center>\n![](figs/environment.png)\n\n</center>\n\n:::\n\n:::{.notes}\nIf we look at the global environment Y does not exist as an object but lots of other stuff does that is not. \n\nBecause x and y live within e we need to tell that they belong to e so to fix it we would need to tell lm where y and x \n\n:::\n\n\n## Fixing Our Issue \n:::incremental \n\n- To fix this we need to feed `e` to the data argument\n  - To do this we need to index e \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmean(e$y)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 30.5\n```\n:::\n:::\n\n\n\n:::\n\n\n:::{.notes}\nIn R one of the biggest things is that being explicit about what name to use is how we do things. If you are not you are gonna get error messages at best.There are lots of ways \n\n\n:::\n\n\n## What are Objects?\n\n- Objects are what we work with in `R`\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"is.array\"                \"is.atomic\"              \n [3] \"is.call\"                 \"is.character\"           \n [5] \"is.complex\"              \"is.data.frame\"          \n [7] \"is.double\"               \"is.element\"             \n [9] \"is.environment\"          \"is.expression\"          \n[11] \"is.factor\"               \"is.finite\"              \n[13] \"is.function\"             \"is.infinite\"            \n[15] \"is.integer\"              \"is.language\"            \n[17] \"is.list\"                 \"is.loaded\"              \n[19] \"is.logical\"              \"is.matrix\"              \n[21] \"is.na\"                   \"is.na.data.frame\"       \n[23] \"is.na.numeric_version\"   \"is.na.POSIXlt\"          \n[25] \"is.na<-\"                 \"is.na<-.default\"        \n[27] \"is.na<-.factor\"          \"is.na<-.numeric_version\"\n[29] \"is.name\"                 \"is.nan\"                 \n[31] \"is.null\"                 \"is.numeric\"             \n[33] \"is.numeric_version\"      \"is.numeric.Date\"        \n[35] \"is.numeric.difftime\"     \"is.numeric.POSIXt\"      \n[37] \"is.object\"               \"is.ordered\"             \n[39] \"is.package_version\"      \"is.pairlist\"            \n[41] \"is.primitive\"            \"is.qr\"                  \n[43] \"is.R\"                    \"is.raw\"                 \n[45] \"is.recursive\"            \"is.single\"              \n[47] \"is.symbol\"               \"is.table\"               \n[49] \"is.unsorted\"             \"is.vector\"              \n[51] \"isa\"                     \"isatty\"                 \n[53] \"isBaseNamespace\"         \"isdebugged\"             \n[55] \"isFALSE\"                 \"isIncomplete\"           \n[57] \"isNamespace\"             \"isNamespaceLoaded\"      \n[59] \"isOpen\"                  \"isRestart\"              \n[61] \"isS4\"                    \"isSeekable\"             \n[63] \"isSymmetric\"             \"isSymmetric.matrix\"     \n[65] \"isTRUE\"                 \n```\n:::\n:::\n\n\n\n\n:::{.notes}\nUsing a bit of R we can see all the different logical tests that tests the class of objects in R. Here you can see that there are lots \n\n:::\n\n\n\n## The Usual Suspects\n\n- vectors\n- matrices\n- data frames\n- dates\n- lists\n- functions\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nf = cbind(a,b) ## this will just create a matrix \nclass(f)## lets us check the class of something \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"matrix\" \"array\" \n```\n:::\n\n```{.r .cell-code}\ng = as.data.frame(f) ## converts to a different class\nstr(g) ## shows some info about the structure of the object\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t1 obs. of  2 variables:\n $ a: num 4\n $ b: num 32\n```\n:::\n\n```{.r .cell-code}\ntypeof(g) ## shows how r is storing the object object\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"list\"\n```\n:::\n:::\n\n\n\n:::{.notes}\n\nThese are the ones that tend to come up most regularly used. You can also coerce once class to another. Using as will just force something to be a different class.\n\nWhy type of returns list: data.frame and data.table are both collections (lists) of items (vectors, if you will), each item of the same length (ie each column is an item in the list, internally to R anyway). This is why unlike in a matrix, columns can have different classes.\n:::\n\n\n## A Quick Aside on Naming Stuff\n Things we can never name stuff\n\nThe reason we can't use any of these are because they are reserved for R\n\n```\nif \nelse \nwhile \nfunction \nfor\nTRUE \nFALSE \nNULL \nInf \nNaN \nNA \n```\n\n::: aside\n[There are more see this website for a more complete list](http://stat.ethz.ch/R-manual/R-devel/library/base/html/Reserved.html)\n\n:::\n\n:::{.notes}\nIf you have noticed every object in our little session has a name. But we should be careful about what we name our stuff. We can technically name our objects just about anything except these because they are reserved for R \n\n:::\n\n## A Quick Aside on Naming Stuff(cont)\n Semi-reserved words \n\n\n\nFor simple things like assigning `c = 4 ` and then doing `d = c(1,2,3,4)` R will be able to distinguish between assign c the value of 4 and the `c` that calls `concatenate` which is way more important in R.\n\nHowever it is generally a good idea, *unless you know what you are doing*, to avoid naming things that are functions in `R` because `R` will get confused.\n\n\n\n\n:::{.notes}\nYou will get an error usually that says that Object of type ‘closure’ is not subsettable. This is just R saying wow I am like super confused. Like I have these two things named the same thing R will in the best case give up. It got super stressed and just quit. Other times it will just use the one that was set last. So just avoid doing this for now.\n:::\n\n\n\n\n\n## How and What to Name Objects \n\nThe best practice is to use concise descriptive names\n\nWhen loading in data typically I do `raw_my_dataset_name` and after data all of my  cleaning I do `clean_my_dataset_name`\n\n- Objects must start with a letter. But can contain letters, numbers, `_`, or `.`\n  - snake_case_like_this_is_what_I_use\n  - somePeopleUseCamelCase\n  - some_People.are_Do_not.like_Convention\n     \n    \n \n\n::: aside\nExample and Discussion provided in [R for Data Sciency](https://r4ds.had.co.nz/workflow-basics.html?q=snake##whats-in-a-name) by Hadley Wickham\n:::\n\n\n\n\n\n\n\n\n\n\n\n# Working with Objects in R \n\n\n\n\n\n## The Data We are Working With\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![artwork by @allison_horst](https://raw.githubusercontent.com/andrewheiss/2021-seacen/main/02_data-visualization/slides/img/lter_penguins.png){fig-align='center' width=70%}\n:::\n:::\n\n:::{.notes}\nToday we are going to be using data from the Palmer Penguins R package. This is data that documents various measurement of penguin species from Palmer station. There are a few arguments we can use but I will show you first how to import the penguin data\n\n:::\n\n\n\n## Importing Data\n- You have the option of pointing and clicking via import dataset\n\n- I would recommend importing data via code\n  - You don't have to remember what you named the object originally\n  - Saves future you time \n\n- This is a common error you will get  \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npenguins = read.csv(\"peguins.csv\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in file(file, \"rt\"): cannot open the connection\n```\n:::\n\n```{.r .cell-code}\npenguins = read.csv(\"penguins.csv\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in file(file, \"rt\"): cannot open the connection\n```\n:::\n:::\n\n\n- This happens most often when \n  - the file name is spelled wrong \n  - the file is in a subdirectory or your working directory is not set correctly\n\n### Fixing the error\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npenguins = read.csv(\"data/penguins.csv\")\n```\n:::\n\n\n:::{.notes}\nRemember to work and reuse stuff in R we need to assign it to an object. So first we need to make sure our working directory is set to the correct one. In my case I am keeping the penguins in a data folder\n\n\n:::\n\n\n## Your Turn\n\n- read in the data included to the website using `read.csv`\n  - What happens when you do not assign the dataset?\n  \n- assign the `penguins` dataset to an object named penguins\n\n- use `View`, `head`, and `tail` to inspect the dataset\n\n- using `install.packages()` install ggplot2\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n```{=html}\n<div class=\"countdown\" id=\"timer_8b0ecd3c\" data-update-every=\"1\" data-play-sound=\"true\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">04</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n:::\n:::\n\n\n\n\n\n\n\n\n## Our Data\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n`````{=html}\n<table>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> species </th>\n   <th style=\"text-align:left;\"> island </th>\n   <th style=\"text-align:right;\"> bill_length_mm </th>\n   <th style=\"text-align:right;\"> bill_depth_mm </th>\n   <th style=\"text-align:right;\"> flipper_length_mm </th>\n   <th style=\"text-align:right;\"> body_mass_g </th>\n   <th style=\"text-align:left;\"> sex </th>\n   <th style=\"text-align:right;\"> year </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> Adelie </td>\n   <td style=\"text-align:left;\"> Torgersen </td>\n   <td style=\"text-align:right;\"> 39.1 </td>\n   <td style=\"text-align:right;\"> 18.7 </td>\n   <td style=\"text-align:right;\"> 181 </td>\n   <td style=\"text-align:right;\"> 3750 </td>\n   <td style=\"text-align:left;\"> male </td>\n   <td style=\"text-align:right;\"> 2007 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Adelie </td>\n   <td style=\"text-align:left;\"> Torgersen </td>\n   <td style=\"text-align:right;\"> 39.5 </td>\n   <td style=\"text-align:right;\"> 17.4 </td>\n   <td style=\"text-align:right;\"> 186 </td>\n   <td style=\"text-align:right;\"> 3800 </td>\n   <td style=\"text-align:left;\"> female </td>\n   <td style=\"text-align:right;\"> 2007 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Adelie </td>\n   <td style=\"text-align:left;\"> Torgersen </td>\n   <td style=\"text-align:right;\"> 40.3 </td>\n   <td style=\"text-align:right;\"> 18.0 </td>\n   <td style=\"text-align:right;\"> 195 </td>\n   <td style=\"text-align:right;\"> 3250 </td>\n   <td style=\"text-align:left;\"> female </td>\n   <td style=\"text-align:right;\"> 2007 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Adelie </td>\n   <td style=\"text-align:left;\"> Torgersen </td>\n   <td style=\"text-align:right;\"> NA </td>\n   <td style=\"text-align:right;\"> NA </td>\n   <td style=\"text-align:right;\"> NA </td>\n   <td style=\"text-align:right;\"> NA </td>\n   <td style=\"text-align:left;\"> NA </td>\n   <td style=\"text-align:right;\"> 2007 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Adelie </td>\n   <td style=\"text-align:left;\"> Torgersen </td>\n   <td style=\"text-align:right;\"> 36.7 </td>\n   <td style=\"text-align:right;\"> 19.3 </td>\n   <td style=\"text-align:right;\"> 193 </td>\n   <td style=\"text-align:right;\"> 3450 </td>\n   <td style=\"text-align:left;\"> female </td>\n   <td style=\"text-align:right;\"> 2007 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Adelie </td>\n   <td style=\"text-align:left;\"> Torgersen </td>\n   <td style=\"text-align:right;\"> 39.3 </td>\n   <td style=\"text-align:right;\"> 20.6 </td>\n   <td style=\"text-align:right;\"> 190 </td>\n   <td style=\"text-align:right;\"> 3650 </td>\n   <td style=\"text-align:left;\"> male </td>\n   <td style=\"text-align:right;\"> 2007 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n\n:::{.notes}\nUsing the magical penguin data we will leave you here with some sort of actionable stuff\n\n:::\n\n\n## Indexing  `[]`\n\n- We can use `[]` to index objects. \n\n- There are two slots we can use *rows* and *columns* in the brackets if we are using a dataframe like this. \n - `object_name[rows, columns]`\n - We can also subset our data by column position using `:` or `c(column 1, column 2)`\n\n:::columns\n:::column\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npenguins[1,1]\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n`````{=html}\n<table>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> x </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> Adelie </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n:::\n\n:::column\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npenguins[1,1:2]\n\npenguins[1,c(1,4)]\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n`````{=html}\n<table>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> species </th>\n   <th style=\"text-align:left;\"> island </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> Adelie </td>\n   <td style=\"text-align:left;\"> Torgersen </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n\n::: {.cell-output-display}\n`````{=html}\n<table>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> species </th>\n   <th style=\"text-align:right;\"> bill_depth_mm </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> Adelie </td>\n   <td style=\"text-align:right;\"> 18.7 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n:::\n:::\n\n\n\n:::{.notes}\nknowing how to index stuff is important because often times we neeed to tell R what to get. Which is pretty critical especially if we want to use all the flexibility of R. I use lists a lot to report coefficients from a regression or to automatically update my syllabus when things change.\n\n:::\n\n\n\n## Indexing  `[]` (cont)\n\n\n- Lists are super flexible because they can hold lots of different kinds of stuff\n  - When you estimate an OLS model it returns a list.\n\n- We can tell R what element of a list using a combo of `[]` and `[[]]`\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmy_list = list(a = 1:4, b = \"Hello World\", c = data.frame(x = 1:3, y = 4:6))\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmy_list[1][2] ## get the first item in the list and the second element of that item\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$<NA>\nNULL\n```\n:::\n\n```{.r .cell-code}\nmy_list[2]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$b\n[1] \"Hello World\"\n```\n:::\n\n```{.r .cell-code}\nmy_list[[3]][1]\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|  x|\n|--:|\n|  1|\n|  2|\n|  3|\n\n</div>\n:::\n:::\n\n\n\n\n\n## `[]` vs `[[]]`\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](https://raw.githubusercontent.com/rstudio-education/hopr/master/images/hopr_0403.png){fig-align='center' width=90%}\n:::\n:::\n\n\n:::{.notes}\nthe difference still trips me up so  I think of this picture. The single set of the brackets simply selects one train car while double brackets opens the train car \n\n:::\n\n## Negative Indexing\n\n- We can also exclude various elements using `-` and/or tests that I showed you earlier\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npenguins[,-1]\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n`````{=html}\n<table>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> island </th>\n   <th style=\"text-align:right;\"> bill_length_mm </th>\n   <th style=\"text-align:right;\"> bill_depth_mm </th>\n   <th style=\"text-align:right;\"> flipper_length_mm </th>\n   <th style=\"text-align:right;\"> body_mass_g </th>\n   <th style=\"text-align:left;\"> sex </th>\n   <th style=\"text-align:right;\"> year </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> Torgersen </td>\n   <td style=\"text-align:right;\"> 39.1 </td>\n   <td style=\"text-align:right;\"> 18.7 </td>\n   <td style=\"text-align:right;\"> 181 </td>\n   <td style=\"text-align:right;\"> 3750 </td>\n   <td style=\"text-align:left;\"> male </td>\n   <td style=\"text-align:right;\"> 2007 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Torgersen </td>\n   <td style=\"text-align:right;\"> 39.5 </td>\n   <td style=\"text-align:right;\"> 17.4 </td>\n   <td style=\"text-align:right;\"> 186 </td>\n   <td style=\"text-align:right;\"> 3800 </td>\n   <td style=\"text-align:left;\"> female </td>\n   <td style=\"text-align:right;\"> 2007 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Torgersen </td>\n   <td style=\"text-align:right;\"> 40.3 </td>\n   <td style=\"text-align:right;\"> 18.0 </td>\n   <td style=\"text-align:right;\"> 195 </td>\n   <td style=\"text-align:right;\"> 3250 </td>\n   <td style=\"text-align:left;\"> female </td>\n   <td style=\"text-align:right;\"> 2007 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Torgersen </td>\n   <td style=\"text-align:right;\"> NA </td>\n   <td style=\"text-align:right;\"> NA </td>\n   <td style=\"text-align:right;\"> NA </td>\n   <td style=\"text-align:right;\"> NA </td>\n   <td style=\"text-align:left;\"> NA </td>\n   <td style=\"text-align:right;\"> 2007 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Torgersen </td>\n   <td style=\"text-align:right;\"> 36.7 </td>\n   <td style=\"text-align:right;\"> 19.3 </td>\n   <td style=\"text-align:right;\"> 193 </td>\n   <td style=\"text-align:right;\"> 3450 </td>\n   <td style=\"text-align:left;\"> female </td>\n   <td style=\"text-align:right;\"> 2007 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Torgersen </td>\n   <td style=\"text-align:right;\"> 39.3 </td>\n   <td style=\"text-align:right;\"> 20.6 </td>\n   <td style=\"text-align:right;\"> 190 </td>\n   <td style=\"text-align:right;\"> 3650 </td>\n   <td style=\"text-align:left;\"> male </td>\n   <td style=\"text-align:right;\"> 2007 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n\n\n\n\n\n## Negative Indexing(cont)\n\n- We can use the same things in negative indexing to omit stuff\n\n:::columns\n:::column\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npenguins[,-(1:4)]\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n`````{=html}\n<table>\n <thead>\n  <tr>\n   <th style=\"text-align:right;\"> flipper_length_mm </th>\n   <th style=\"text-align:right;\"> body_mass_g </th>\n   <th style=\"text-align:left;\"> sex </th>\n   <th style=\"text-align:right;\"> year </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:right;\"> 181 </td>\n   <td style=\"text-align:right;\"> 3750 </td>\n   <td style=\"text-align:left;\"> male </td>\n   <td style=\"text-align:right;\"> 2007 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 186 </td>\n   <td style=\"text-align:right;\"> 3800 </td>\n   <td style=\"text-align:left;\"> female </td>\n   <td style=\"text-align:right;\"> 2007 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 195 </td>\n   <td style=\"text-align:right;\"> 3250 </td>\n   <td style=\"text-align:left;\"> female </td>\n   <td style=\"text-align:right;\"> 2007 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> NA </td>\n   <td style=\"text-align:right;\"> NA </td>\n   <td style=\"text-align:left;\"> NA </td>\n   <td style=\"text-align:right;\"> 2007 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 193 </td>\n   <td style=\"text-align:right;\"> 3450 </td>\n   <td style=\"text-align:left;\"> female </td>\n   <td style=\"text-align:right;\"> 2007 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 190 </td>\n   <td style=\"text-align:right;\"> 3650 </td>\n   <td style=\"text-align:left;\"> male </td>\n   <td style=\"text-align:right;\"> 2007 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n:::\n\n:::column\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npenguins[,-c(2,3,5,8)]\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n`````{=html}\n<table>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> species </th>\n   <th style=\"text-align:right;\"> bill_depth_mm </th>\n   <th style=\"text-align:right;\"> body_mass_g </th>\n   <th style=\"text-align:left;\"> sex </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> Adelie </td>\n   <td style=\"text-align:right;\"> 18.7 </td>\n   <td style=\"text-align:right;\"> 3750 </td>\n   <td style=\"text-align:left;\"> male </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Adelie </td>\n   <td style=\"text-align:right;\"> 17.4 </td>\n   <td style=\"text-align:right;\"> 3800 </td>\n   <td style=\"text-align:left;\"> female </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Adelie </td>\n   <td style=\"text-align:right;\"> 18.0 </td>\n   <td style=\"text-align:right;\"> 3250 </td>\n   <td style=\"text-align:left;\"> female </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Adelie </td>\n   <td style=\"text-align:right;\"> NA </td>\n   <td style=\"text-align:right;\"> NA </td>\n   <td style=\"text-align:left;\"> NA </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Adelie </td>\n   <td style=\"text-align:right;\"> 19.3 </td>\n   <td style=\"text-align:right;\"> 3450 </td>\n   <td style=\"text-align:left;\"> female </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Adelie </td>\n   <td style=\"text-align:right;\"> 20.6 </td>\n   <td style=\"text-align:right;\"> 3650 </td>\n   <td style=\"text-align:left;\"> male </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n\n:::\n:::\n\n\n\n\n## Subsetting By Tests\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npenguins[penguins[\"sex\"] == \"female\", c(\"species\", \"sex\")]\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n`````{=html}\n<table>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\">   </th>\n   <th style=\"text-align:left;\"> species </th>\n   <th style=\"text-align:left;\"> sex </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> 2 </td>\n   <td style=\"text-align:left;\"> Adelie </td>\n   <td style=\"text-align:left;\"> female </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 3 </td>\n   <td style=\"text-align:left;\"> Adelie </td>\n   <td style=\"text-align:left;\"> female </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> NA </td>\n   <td style=\"text-align:left;\"> NA </td>\n   <td style=\"text-align:left;\"> NA </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 5 </td>\n   <td style=\"text-align:left;\"> Adelie </td>\n   <td style=\"text-align:left;\"> female </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 7 </td>\n   <td style=\"text-align:left;\"> Adelie </td>\n   <td style=\"text-align:left;\"> female </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> NA.1 </td>\n   <td style=\"text-align:left;\"> NA </td>\n   <td style=\"text-align:left;\"> NA </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> NA.2 </td>\n   <td style=\"text-align:left;\"> NA </td>\n   <td style=\"text-align:left;\"> NA </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> NA.3 </td>\n   <td style=\"text-align:left;\"> NA </td>\n   <td style=\"text-align:left;\"> NA </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> NA.4 </td>\n   <td style=\"text-align:left;\"> NA </td>\n   <td style=\"text-align:left;\"> NA </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 13 </td>\n   <td style=\"text-align:left;\"> Adelie </td>\n   <td style=\"text-align:left;\"> female </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n\n\n\n\n\n## `$` Indexing \n\nA really useful way of indexing in `R` is referencing stuff by name rather than position. \n  - The way we do this is throught the `$`\n  \n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmy_list$a\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3 4\n```\n:::\n\n```{.r .cell-code}\nmy_list$b\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Hello World\"\n```\n:::\n\n```{.r .cell-code}\nmy_list$c\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|  x|  y|\n|--:|--:|\n|  1|  4|\n|  2|  5|\n|  3|  6|\n\n</div>\n:::\n:::\n\n\n\n\n\n\n\n\n## Indexing(cont)\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmy_list[[3]][[2]] ## these are just returning the same thing \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4 5 6\n```\n:::\n\n```{.r .cell-code}\nmy_list$c$y\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4 5 6\n```\n:::\n:::\n\n\n:::{.notes}\nYou can also use brackets to pick which element of the thing you want to figure out is. These are all important to know or be aware of all the ways you can find something you need. And like a lot of things in R there are tons of ways to get the same task done. The right way is what returns the right answer for you is the solution. Worry about speeding things up later.\n\n:::\n\n\n\n\n\n## `$` in action\n\nThis will just subset things\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npenguins[penguins$species == \"Gentoo\", c(\"species\", \"island\", \"bill_length_mm\")] \n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n`````{=html}\n<table>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\">   </th>\n   <th style=\"text-align:left;\"> species </th>\n   <th style=\"text-align:left;\"> island </th>\n   <th style=\"text-align:right;\"> bill_length_mm </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> 153 </td>\n   <td style=\"text-align:left;\"> Gentoo </td>\n   <td style=\"text-align:left;\"> Biscoe </td>\n   <td style=\"text-align:right;\"> 46.1 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 154 </td>\n   <td style=\"text-align:left;\"> Gentoo </td>\n   <td style=\"text-align:left;\"> Biscoe </td>\n   <td style=\"text-align:right;\"> 50.0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 155 </td>\n   <td style=\"text-align:left;\"> Gentoo </td>\n   <td style=\"text-align:left;\"> Biscoe </td>\n   <td style=\"text-align:right;\"> 48.7 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 156 </td>\n   <td style=\"text-align:left;\"> Gentoo </td>\n   <td style=\"text-align:left;\"> Biscoe </td>\n   <td style=\"text-align:right;\"> 50.0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 157 </td>\n   <td style=\"text-align:left;\"> Gentoo </td>\n   <td style=\"text-align:left;\"> Biscoe </td>\n   <td style=\"text-align:right;\"> 47.6 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 158 </td>\n   <td style=\"text-align:left;\"> Gentoo </td>\n   <td style=\"text-align:left;\"> Biscoe </td>\n   <td style=\"text-align:right;\"> 46.5 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 159 </td>\n   <td style=\"text-align:left;\"> Gentoo </td>\n   <td style=\"text-align:left;\"> Biscoe </td>\n   <td style=\"text-align:right;\"> 45.4 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 160 </td>\n   <td style=\"text-align:left;\"> Gentoo </td>\n   <td style=\"text-align:left;\"> Biscoe </td>\n   <td style=\"text-align:right;\"> 46.7 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 161 </td>\n   <td style=\"text-align:left;\"> Gentoo </td>\n   <td style=\"text-align:left;\"> Biscoe </td>\n   <td style=\"text-align:right;\"> 43.3 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 162 </td>\n   <td style=\"text-align:left;\"> Gentoo </td>\n   <td style=\"text-align:left;\"> Biscoe </td>\n   <td style=\"text-align:right;\"> 46.8 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n\n\n## `$` in action(cont)\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsummary(penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   species             island          bill_length_mm  bill_depth_mm  \n Length:344         Length:344         Min.   :32.10   Min.   :13.10  \n Class :character   Class :character   1st Qu.:39.23   1st Qu.:15.60  \n Mode  :character   Mode  :character   Median :44.45   Median :17.30  \n                                       Mean   :43.92   Mean   :17.15  \n                                       3rd Qu.:48.50   3rd Qu.:18.70  \n                                       Max.   :59.60   Max.   :21.50  \n                                       NA's   :2       NA's   :2      \n flipper_length_mm  body_mass_g       sex                 year     \n Min.   :172.0     Min.   :2700   Length:344         Min.   :2007  \n 1st Qu.:190.0     1st Qu.:3550   Class :character   1st Qu.:2007  \n Median :197.0     Median :4050   Mode  :character   Median :2008  \n Mean   :200.9     Mean   :4202                      Mean   :2008  \n 3rd Qu.:213.0     3rd Qu.:4750                      3rd Qu.:2009  \n Max.   :231.0     Max.   :6300                      Max.   :2009  \n NA's   :2         NA's   :2                                       \n```\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmean(penguins$bill_depth_mm)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n:::\n\n\n\nuh oh what happened? \n\n\n:::{.notes}\nOkay so now that we have found different ways to index things lets get some summary statistics for our penguins dataframe. We can use column indexing but in our case it will make our lives easier if we use the dollar sign\n\n\n:::\n\n## Finding Help\n\n- Asking for help in R is easy the most common ways are `help(thingineedhelpwith)` and `?thingineedhelpwith`\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n?mean\n```\n:::\n\n\n- `?thingineedhelpwith` is probably the most common because it requires less typing.\n\n\n\n:::{.notes}\n\nNotice how R returns NA as the mean. R is generally pretty conservative and will be cautious when you try to get the mean for bill depth it returns NA because there are a few NA values in the column. We will talk about various solutions to getting rid of NA's in data cleaning in a future workshop but for now we may just want to find the mean of our column. Mean and many functions have a way to do this inside them \n\n:::\n\n## Fixing our issue\n:::incremental\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmean(penguins$bill_depth_mm, na.rm =TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 17.15117\n```\n:::\n:::\n\n\n- *Good* documentation fluctuates wildly because it is an open source language\n\n\n- If in doubt \n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](pics/stackoverflow.png){fig-align='center' width=25%}\n:::\n:::\n\n\n\n:::\n\n\n\n\n\n\n## Your Turn\n\n- Find the minimum value of `bill_length_mm`\n\n- Find the maximum value of `body_mass_g`\n\n- Subset the penguins data any way you want using `[]` or `$`\n\n- Assign each of them to an object\n\n- Create a vector of anything you want and find the second thing in that vector using `[]`\n\n- Do the same thing using `$`\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n```{=html}\n<div class=\"countdown\" id=\"timer_101bdc5b\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n:::\n:::\n\n\n\n\n\n\n\n## Some additional useful stuff\n\n- If you think back to when I had you use head and tail `R` told you what the class of each variable\n  - If you forgot just run `head(penguins)` in your R script\n\n- You will notice that `species` and `island` are a factor class so your measures of central tendency are not going to be all that informative. \n\n- Fortunately `R` comes with some handy functions to use \n\n- `table` counts each factor level \n\n- `tapply` will let you group stuff by a factor and get some useful balance statistics \n\n\n\n\n\n## Table \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntable(penguins$species)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n   Adelie Chinstrap    Gentoo \n      152        68       124 \n```\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntable(penguins$sex)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nfemale   male \n   165    168 \n```\n:::\n\n```{.r .cell-code}\nanyNA(penguins$sex)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\n:::{.notes}\ntable is handy but in some cases it does not give us all the information we need in some cases we might have missing values and table will just ignore them \n:::\n\n\n\n## tapply and calculating descriptive statistics by groups  \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntapply(penguins$species,penguins$island, table)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$Biscoe\n\nAdelie Gentoo \n    44    124 \n\n$Dream\n\n   Adelie Chinstrap \n       56        68 \n\n$Torgersen\n\nAdelie \n    52 \n```\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntapply(penguins$bill_depth_mm, penguins$species, mean, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Adelie Chinstrap    Gentoo \n 18.34636  18.42059  14.98211 \n```\n:::\n:::\n\n\n\n:::{.notes}\nWe may want to see where our penguin friends live so we can use tapply which is a handy trick. There will be some convincing you need to do with to make drop the missing values in tapply. I fought with it on the plane so trust me.\n\n:::\n\n\n## Plotting\n:::columns\n:::column\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplot(penguins$bill_length_mm,\n     penguins$body_mass_g,\n     xlab = \"Bill Length(mm)\",\n     ylab = \"Body Mass(g)\")\n```\n:::\n\n:::\n\n:::column\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](figs/base-r-scatter-out-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n:::\n:::\n\n\n\n\n\n\n## Plotting(cont)\n:::columns\n:::column\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhist(penguins$bill_length_mm,\n xlim = c(30, 60))\n```\n:::\n\n:::\n\n\n:::column\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](figs/base-r-hist-out-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n\n:::\n:::\n\n\n\n\n\n## Cleaning up after yourslef\n\n- `rm(objectname)` will remove the objects you created \n\n- `rm(list=ls())` will remove all the objects your created\n\n- You can remove packages, sometimes, with `detach(package:packageyouwanttoremove)`\n  - This can be iffy for a variety of reasons\n  - Some packages automatically load another package or depend on another.\n\n- However, restarting your `R` session is generally best practice because it will do both \n\n\n## Getting Good at R\n\n\n\n<center>\n\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">The only way to write good code is to write tons of shitty code first. Feeling shame about bad code stops you from getting to good code</p>&mdash; Hadley Wickham (@hadleywickham) <a href=\"https://twitter.com/hadleywickham/status/589068687669243905?ref_src=twsrc%5Etfw\">April 17, 2015</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n</center>\n:::{.notes}\n\nyou are going to run into lots of error messages and it is going to be really frustrating. Warning messages and errors are something we all run into. Trust me I have been close to needing a new computer more than few times. Part of getting good at R is just figuring out what the hell \n\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/countdown-0.4.0/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    function fireSlideChanged(previousSlide, currentSlide) {\n\n      // dispatch for htmlwidgets\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for reveal\n    if (window.Reveal) {\n      window.Reveal.addEventListener(\"slidechanged\", function(event) {\n        fireSlideChanged(event.previousSlide, event.currentSlide);\n      });\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}