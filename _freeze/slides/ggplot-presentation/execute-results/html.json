{
  "hash": "3e578eedc3271064eae8133de3dd1d39",
  "result": {
    "markdown": "---\ntitle: \"Getting Started in ggplot\"\ninstitute: \"Department of Political Science at Georgia State University\"\nauthor: \"Josh Allen\"\ndate: \"2022-08-29\"\nformat:\n  revealjs:\n   theme: \"allen.scss\"\n   transition: fade\n   progress: true\n   multiplex: false\n   preview-links: true\n   hide-inactive-cursor: true\n   highlight-style: printing\n   chalkboard:\n    theme: whiteboard\n    boardmarker-width: 4\n    buttons: true\n    pause: true\nknitr:\n  opts_chunk:\n    dev: \"ragg_png\"\n    retina: 1\n    dpi: 200\nexecute:\n  freeze: auto\n  echo: true\n  fig-width: 5\n  fig-height: 6\n---\n\n\n\n\n\n\n## Where We Have Been\n\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\nplot(penguins$bill_length_mm,\n   penguins$body_mass_g,\n   xlab = \"Bill Length(mm)\",\n   ylab = \"Body Mass(g)\")\n   abline(lm(body_mass_g~bill_length_mm, data = penguins))\n```\n\n::: {.cell-output-display}\n![](ggplot-presentation_files/figure-revealjs/unnamed-chunk-1-1.png){width=60%}\n:::\n:::\n\n\n:::{.notes}\nWe have seen how to make plots in base R they take this general form \n\n:::\n\n\n## Expanding What We Know{.scrollable}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow = c(2,2))\nplot(penguins$bill_length_mm,\n        penguins$body_mass_g,\n    xlab = \"Bill Length(mm)\",\n   ylab = \"Body Mass(g)\")\nhist(penguins$bill_length_mm,\n  xlim = c(30, 60))\nplot(density(penguins$bill_length_mm))\nplot(penguins$bill_length_mm,\n    penguins$body_mass_g,\n    xlab = \"Bill Length(mm)\",\n    ylab = \"Body Mass(g)\")\nabline(lm(body_mass_g~bill_length_mm, data = penguins))\n```\n:::\n\n::: {.cell layout-ncol=\"2\"}\n::: {.cell-output-display}\n![](ggplot-presentation_files/figure-revealjs/unnamed-chunk-3-1.png){width=1000}\n:::\n\n::: {.cell-output-display}\n![](ggplot-presentation_files/figure-revealjs/unnamed-chunk-3-2.png){width=1000}\n:::\n\n::: {.cell-output-display}\n![](ggplot-presentation_files/figure-revealjs/unnamed-chunk-3-3.png){width=1000}\n:::\n\n::: {.cell-output-display}\n![](ggplot-presentation_files/figure-revealjs/unnamed-chunk-3-4.png){width=1000}\n:::\n:::\n\n\n\n:::{.notes}\nyou have to add something like jpeg(\"name_of_plot.jpg\")\n\nand then add dev.off() at the end\n\n:::\n\n\n# Research Data Services \n\n\n## Our Team \n\n\n::: {.cell}\n::: {.cell-output-display}\n![](figs/rds-team-members.png){width=288}\n:::\n:::\n\n\n:::{.notes}\n\n Also, we do not have the capacity to provide pre-scheduled frequent software tutoring that is divorced from a specific assignment or software troubleshooting task at hand -- in other words, we are also not generalized software tutors. \n \n Our one-on-one software assistance is available to help you troubleshoot specific tasks or assignments. If you are seeking generalized software help, we direct you to our live workshops and our recorded workshops to gain the foundational skills for using various analytical software. Then, when or if the time comes that you have targeted software questions or specific issues to tackle related to a course assignment or research project, please feel free to contact us for one-on-one support. \n:::\n\n\n## Get Ready Badges\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](figs/get-ready-badges.png){width=288}\n:::\n:::\n\n\n\n:::{.notes}\n\n\nhttps://research.library.gsu.edu/dataservices/data-ready\n\nThese are awesome to share on social media i.e. linkedin which is a good signal\nto potential employers that you know this stuff\n\n:::\n\n## How To Get the Badges\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](figs/how-to-badge.png){width=288}\n:::\n:::\n\n\n\n# The Importance of Graphing {background-color=\"#b64f32\" .white}\n\n\n\n\n## Why visualize your data?\n\n\n::: {.cell eco='true'}\n\n```{.r .cell-code}\nmean(graph_dat$x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 54.2657\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsd(graph_dat$x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 16.713\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(graph_dat$y)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 47.8351\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsd(graph_dat$y)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 26.84777\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncor(graph_dat$x, graph_dat$y)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -0.06601891\n```\n:::\n:::\n\n\n\n\n:::{.notes}\n\n\n\nLets take a quick look at the data that I have loaded in. They look pretty similar for the most part and aren't correlated. \n\n:::\n\n\n## The Dino Strikes\n\n<figure>\n  <img src=\"https://raw.githubusercontent.com/andrewheiss/datavizs21.classes.andrewheiss.com/main/static/slides/img/01/DinoSequentialSmaller.gif\" alt=\"Datasaurus Dozen\" title=\"Datasaurus Dozen\" width=\"100%\">\n  <figcaption><a href=\"https://www.autodeskresearch.com/publications/samestats\" target=\"_blank\">The Datasaurus Dozen</a></figcaption>\n</figure>\n\n\n## Why `ggplot2`?\n\n:::{.callout-note appearance=\"minimal\"}\nThe transferable skills from ggplot2 are not the idiosyncrasies of plotting syntax, but a powerful way of thinking about visualization, as a way of mapping between variables and the visual properties of geometric objects that you can perceive.\n\n-- Hadley Wickham\n:::\n\n\n\n\n\n## Why `ggplot2`?\n:::incremental \n\n- You have probably heard of it but why use it?\n\n- Once we understand the \"grammar\" making figures becomes a lot easier\n\n- Tons of organizations use it\n\n- Flexibility\n  - Tons ways to customize appearance\n  - Lots of functions\n  - Lots of extensions \n\n\n- Reproducibility \n  - Doesn't require you to remember each input from a drop down menu\n  - Defaults to universally usable formats\n  - Replaces itself automatically in your directory \n\n:::\n\n:::{.notes}\nggplot2 is probably one of the most well known and event among many of the staunchest base r users well loved an well used libraries in the R ecosystem.\n\nggplot2 predates most of the tidyverse and the gg part refers to the grammar of graphics, more on that later. Much like writing a sentence there is a proper grammar to it. Once we understand the rules we can construct lots of different \"sentences\".\n\nI think an important theme so to say is that once we start to understand R it benefits your workflow because we can simply tweak a few things and then BAM it will just update. If you are a Latex user then bam the same plot just updates. If you are a word user then those benefits are limited but ggplots play nicely with Word. No having to put replace everywhere or screenshot things or working with propietary formats. If you need to you\n\n\n:::\n\n\n\n\n# The Grammar of Graphics {background-color=\"#b64f32\" .white}\n\n\n\n\n## Grammar \n\n:::columns\n:::column\n\"Good grammar is just the first step of creating a good sentence\"\n\n\n- How is the data related to the figure on the right?\n\n\n:::\n\n\n:::column\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](ggplot-presentation_files/figure-revealjs/penguin-blank-1.png){fig-alt='Here is just a scatter plot with various shapes and sizes. We will fill in the rest as the slides go on' width=1000}\n:::\n:::\n\n\n\n:::\n:::\n\n\n## Building the Plot \n\n:::columns\n:::column\n\n*Body Weight of Penguins and Bill Length*\n\n- ***Penguins***\n\n- ***Species***\n\n- ***Island***\n\n\n:::\n\n:::column\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](ggplot-presentation_files/figure-revealjs/penguin-add-legend-1.png){fig-alt='On the right hand side is the legend that denotes what each color and shape represent. Red represents the island Biscoe, Green Represents the island Dream. Light Blue represents the Torgersen Island. The circles represent the Adelie penguins, the triangles represent the Chinstrap penguins, and the squares represent the Gentoo penguins' width=1000}\n:::\n:::\n\n\n\n:::\n:::\n\n:::{.notes}\n\nI apologize for some weird plotting stuff. I am still working out some kinks with how the presentation is styled. I wanted to try to give the plots and the code the same size on the slides. However that resulted in some weird decisions from quarto\n:::\n\n\n\n\n\n## Building the Plot \n:::columns\n:::column\n\n*Body Weight of Penguins and Bill Length*\n\n- ***Penguins***\n\n- ***Species***\n\n- ***Island***\n\n\n:::\n\n:::column\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](ggplot-presentation_files/figure-revealjs/penguin-add-labs-1.png){fig-alt='On the right hand side is the legend that denotes what each color and shape represent. Red represents the island Biscoe, Green Represents the island Dream. Light Blue represents the Torgersen Island. The circles represent the Adelie penguins, the triangles represent the Chinstrap penguins, and the squares represent the Gentoo penguins. The x axis represents bill length in milimeters and the y axis represents body mass in grams ' width=1000}\n:::\n:::\n\n\n:::\n:::\n\n:::{.notes}\nThere is a grammar to what is going on \n\n:::\n\n\n\n## Building the Plot\n\n:::columns\n:::column\n\n*Body Weight of Penguins and Bill Length*\n\n- ***Penguins***\n\n- ***Species***\n\n- ***Island***\n\n:::\n\n\n\n:::column\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](ggplot-presentation_files/figure-revealjs/penguin-full-1.png){width=1000}\n:::\n:::\n\n\n\n:::\n:::\n\n\n\n## So How Did We go From?  \n\n::::{.columns}\n\n\n:::{.column width=\"50%\" .fragment fragment-index=1}\n\n### This\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](ggplot-presentation_files/figure-revealjs/blank-plot-example-this-1.png){fig-alt='This is the template that I started with with just points and colors' width=1000}\n:::\n:::\n\n\n:::\n\n\n\n:::{.column width=\"50%\" .fragment fragment-index=2}\n\n### To This\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](ggplot-presentation_files/figure-revealjs/full-plot-example-this-1.png){width=1000}\n:::\n:::\n\n\n:::\n::::\n# Making Plots {background-color=\"#b64f32\" .white}\n\n\n## Plotting Data \n\n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> country </th>\n   <th style=\"text-align:left;\"> continent </th>\n   <th style=\"text-align:right;\"> year </th>\n   <th style=\"text-align:right;\"> lifeExp </th>\n   <th style=\"text-align:right;\"> pop </th>\n   <th style=\"text-align:right;\"> gdpPercap </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> Afghanistan </td>\n   <td style=\"text-align:left;\"> Asia </td>\n   <td style=\"text-align:right;\"> 1952 </td>\n   <td style=\"text-align:right;\"> 28.801 </td>\n   <td style=\"text-align:right;\"> 8425333 </td>\n   <td style=\"text-align:right;\"> 779.4453 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Afghanistan </td>\n   <td style=\"text-align:left;\"> Asia </td>\n   <td style=\"text-align:right;\"> 1957 </td>\n   <td style=\"text-align:right;\"> 30.332 </td>\n   <td style=\"text-align:right;\"> 9240934 </td>\n   <td style=\"text-align:right;\"> 820.8530 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Afghanistan </td>\n   <td style=\"text-align:left;\"> Asia </td>\n   <td style=\"text-align:right;\"> 1962 </td>\n   <td style=\"text-align:right;\"> 31.997 </td>\n   <td style=\"text-align:right;\"> 10267083 </td>\n   <td style=\"text-align:right;\"> 853.1007 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Afghanistan </td>\n   <td style=\"text-align:left;\"> Asia </td>\n   <td style=\"text-align:right;\"> 1967 </td>\n   <td style=\"text-align:right;\"> 34.020 </td>\n   <td style=\"text-align:right;\"> 11537966 </td>\n   <td style=\"text-align:right;\"> 836.1971 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Afghanistan </td>\n   <td style=\"text-align:left;\"> Asia </td>\n   <td style=\"text-align:right;\"> 1972 </td>\n   <td style=\"text-align:right;\"> 36.088 </td>\n   <td style=\"text-align:right;\"> 13079460 </td>\n   <td style=\"text-align:right;\"> 739.9811 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Afghanistan </td>\n   <td style=\"text-align:left;\"> Asia </td>\n   <td style=\"text-align:right;\"> 1977 </td>\n   <td style=\"text-align:right;\"> 38.438 </td>\n   <td style=\"text-align:right;\"> 14880372 </td>\n   <td style=\"text-align:right;\"> 786.1134 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Afghanistan </td>\n   <td style=\"text-align:left;\"> Asia </td>\n   <td style=\"text-align:right;\"> 1982 </td>\n   <td style=\"text-align:right;\"> 39.854 </td>\n   <td style=\"text-align:right;\"> 12881816 </td>\n   <td style=\"text-align:right;\"> 978.0114 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Afghanistan </td>\n   <td style=\"text-align:left;\"> Asia </td>\n   <td style=\"text-align:right;\"> 1987 </td>\n   <td style=\"text-align:right;\"> 40.822 </td>\n   <td style=\"text-align:right;\"> 13867957 </td>\n   <td style=\"text-align:right;\"> 852.3959 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Afghanistan </td>\n   <td style=\"text-align:left;\"> Asia </td>\n   <td style=\"text-align:right;\"> 1992 </td>\n   <td style=\"text-align:right;\"> 41.674 </td>\n   <td style=\"text-align:right;\"> 16317921 </td>\n   <td style=\"text-align:right;\"> 649.3414 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Afghanistan </td>\n   <td style=\"text-align:left;\"> Asia </td>\n   <td style=\"text-align:right;\"> 1997 </td>\n   <td style=\"text-align:right;\"> 41.763 </td>\n   <td style=\"text-align:right;\"> 22227415 </td>\n   <td style=\"text-align:right;\"> 635.3414 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n\n\n## Here is your shell script\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## be sure you have done \n## install.packages(\"gapminder\")\n## library(gapminder)\n\nggplot() +\n  geom_point(data = gapminder, mapping = aes(x = gdpPercap, y = lifeExp))\n```\n:::\n\n\n:::{.notes}\nTo help you get your hands dirty I will give y'all a shell script to work with. Press o on your keyboard to navigate to the past slides to help yourself out if you get lost \n:::\n\n\n\n\n## Activity {background-color=\"#FFECE9\"}\n\n\n- Add color, size, alpha, and shape aesthetics to your graph.\n\n\n- Be bold be brave! Experiment!\n\n\n- What happens when you add more than one aesthetic? \n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"countdown\" id=\"timer_9317e326\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n:::\n:::\n\n\n\n\n\n\n\n\n\n\n\n## How would you make this plot?\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](ggplot-presentation_files/figure-revealjs/gapminder-blue-1.png){fig-align='center' width=1000}\n:::\n:::\n\n\n:::{.notes}\nall we are doing is making each point blue. Should be simple enough. If you are following along please add color = blue where you think it should go!\n\n:::\n\n\n\n\n\n\n\n\n\n## \n\n\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code  code-line-numbers=\"5\"}\nggplot() + \n  geom_point(data = gapminder,\n   aes(x = gdpPercap,\n    y = lifeExp,\n    color = \"blue\"))\n```\n\n::: {.cell-output-display}\n![](ggplot-presentation_files/figure-revealjs/gapminder-blue-wrong-example-1.png){width=1000}\n:::\n:::\n\n\n\n\n\n:::{.notes}\nRemember when we do things in aes R will look for a column in our dataset. Importantly R will just looks for things it can do given the scope of the function. So if we put blue into the aes portion of it will plot it. But it will get confused because blue is not a column in our data set. \n\n:::\n\n\n##  \n\n\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code  code-line-numbers=\"5\"}\nggplot() +\n  geom_point(data = gapminder,\n    aes(x = gdpPercap,\n        y = lifeExp),\n        color = \"blue\") \n```\n\n::: {.cell-output-display}\n![](ggplot-presentation_files/figure-revealjs/use-color-aes-example-1.png){width=1000}\n:::\n:::\n\n\n\n\n\n:::{.notes}\nggplot will take the color argument inside aes and outside aes. If we specify color inside aes than it will color things by a column in the dataset. If you specify color outside of aes ggplot will make everything that color \n\n:::\n\n\n\n## Same options different stuff\n\n:::columns\n:::column\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](ggplot-presentation_files/figure-revealjs/geom-point-gap-1.png){width=1000}\n:::\n:::\n\n\n\n:::\n\n:::column\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](ggplot-presentation_files/figure-revealjs/geom-smooth-gap-1.png){width=1000}\n:::\n:::\n\n\n:::\n:::\n\n:::{.notes}\nthere we can show the same relationship between two variables in a ton of different ways. there are a ton of geoms that we can use to visualize our data. In this case I am just fitting a loess line through it. \n\n:::\n\n\n## What Comes With ggplot\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"geom_abline\"            \"geom_area\"              \"geom_bar\"              \n [4] \"geom_bin_2d\"            \"geom_bin2d\"             \"geom_blank\"            \n [7] \"geom_boxplot\"           \"geom_col\"               \"geom_contour\"          \n[10] \"geom_contour_filled\"    \"geom_count\"             \"geom_crossbar\"         \n[13] \"geom_curve\"             \"geom_density\"           \"geom_density_2d\"       \n[16] \"geom_density_2d_filled\" \"geom_density2d\"         \"geom_density2d_filled\" \n[19] \"geom_dotplot\"           \"geom_errorbar\"          \"geom_errorbarh\"        \n[22] \"geom_freqpoly\"          \"geom_function\"          \"geom_hex\"              \n[25] \"geom_histogram\"         \"geom_hline\"             \"geom_jitter\"           \n[28] \"geom_label\"             \"geom_line\"              \"geom_linerange\"        \n[31] \"geom_map\"               \"geom_path\"              \"geom_point\"            \n[34] \"geom_pointrange\"        \"geom_polygon\"           \"geom_qq\"               \n[37] \"geom_qq_line\"           \"geom_quantile\"          \"geom_raster\"           \n[40] \"geom_rect\"              \"geom_ribbon\"            \"geom_rug\"              \n[43] \"geom_segment\"           \"geom_sf\"                \"geom_sf_label\"         \n[46] \"geom_sf_text\"           \"geom_smooth\"            \"geom_spoke\"            \n[49] \"geom_step\"              \"geom_text\"              \"geom_tile\"             \n[52] \"geom_violin\"            \"geom_vline\"            \n```\n:::\n:::\n\n:::{.notes}\nThere are many more that we can use too. There are tons of different kinds of plots that we can find for our specific plotting needs that people have written for R I have like an unhealthy obsession with ggridges. I will say geom_sf only gets added when you have the sf package loaded and then \n:::\n\n\n##\n\n<center>\n\n<iframe src=\"https://giphy.com/embed/mCClSS6xbi8us\" width=\"480\" height=\"298\" frameBorder=\"0\" class=\"giphy-embed\" allowFullScreen></iframe><p><a href=\"https://giphy.com/gifs/jeff-goldblum-jurassic-park-jurassicparkedit-mCClSS6xbi8us\">via GIPHY</a></p>\n\n:::{.notes}\nIt's not that certain geoms should never be used with certain kinds its that sometimes it doesnt make a whole lot of sense or we aren't getting the most out of our data visualizations. If it takes the arguments it will plot it.\n:::\n\n\n</center>\n\n## Example(sort of)\n\n:::columns\n:::column\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](ggplot-presentation_files/figure-revealjs/dotplot-gapminder-1.png){width=1000}\n:::\n:::\n\n:::\n\n:::column\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](ggplot-presentation_files/figure-revealjs/dotplot-penguings-1.png){width=1000}\n:::\n:::\n\n\n\n\n:::\n:::\n\n\n\n\n\n:::{.notes}\nBoth times we see that we that ggplot will take the arguments and plot them but we arent really getting a lot of useful information. Boxplots would provide a much provide more info\n\n\n:::\n\n\n## Your Turn\n\n:::columns \n:::column\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](ggplot-presentation_files/figure-revealjs/dotplot-gapminder-ref-excercise-1.png){width=1000}\n:::\n:::\n\n:::\n\n:::column\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](ggplot-presentation_files/figure-revealjs/unnamed-chunk-8-1.png){width=1000}\n:::\n:::\n\n\n:::\n:::\n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"countdown\" id=\"timer_5623d6c9\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">02</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n:::\n:::\n\n\n\n:::{.notes}\ntake the graph on the left and change it to the plot on the right. use the ggplot cheatsheet.\n\n:::\n\n\n## Answer\n \n\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\nggplot() +\n  geom_boxplot(data = gapminder,\n  aes(x = continent, \n  y = lifeExp))\n```\n\n::: {.cell-output-display}\n![](ggplot-presentation_files/figure-revealjs/unnamed-chunk-10-1.png){width=1000}\n:::\n:::\n\n\n\n\n\n\n\n\n\n## Your Turn Again\n#### Hint do not supply a Y value\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](ggplot-presentation_files/figure-revealjs/unnamed-chunk-11-1.png){fig-align='center' width=80%}\n:::\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"countdown\" id=\"timer_cf8f63c0\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">02</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n:::\n:::\n\n\n:::{.notes}\nLets make a histogram of lifeExp. In this case we only need to supply one variable to aes. Take exp and look at the distribution through a histogram \n:::\n\n\n\n\n##  \n\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\nggplot() +\n  geom_histogram( data = gapminder, \n    aes(x = lifeExp))\n```\n\n::: {.cell-output-display}\n![](ggplot-presentation_files/figure-revealjs/unnamed-chunk-13-1.png){width=1000}\n:::\n:::\n\n\n\n\n\n## Your Turn\n#### Make This Density Plot filled by continent\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](ggplot-presentation_files/figure-revealjs/unnamed-chunk-14-1.png){fig-align='center' width=1600}\n:::\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"countdown\" id=\"timer_4da7d2d2\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">02</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n:::\n:::\n\n\n:::{.notes}\nAgain do not supply a Y column\n:::\n\n\n## \n\n\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\nggplot() +\n  geom_density( data = gapminder,\n  aes(x = lifeExp,\n     fill = continent),\n     alpha = 0.75)\n```\n\n::: {.cell-output-display}\n![](ggplot-presentation_files/figure-revealjs/unnamed-chunk-16-1.png){width=1000}\n:::\n:::\n\n\n\n\n\n\n\n## Complex graph!\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](ggplot-presentation_files/figure-revealjs/reference-plot-1.png){width=2000}\n:::\n:::\n\n\n\n:::{.notes}\nMap wealth to the x-axis, health to the y-axis, add points, color by continent, size by population, scale the x-axis with a log. Please get rid of the default theme.\n\n:::\n\n\n\n## Local \n \n\n::: {.cell output-location='column'}\n\n```{.r .cell-code  code-line-numbers=\"2,6,3,7,4,8,5,9\"}\nggplot() +\n  geom_point(data = gapminder,\n   aes(x = gdpPercap,\n       y = lifeExp, \n       color = continent)) + \n  geom_smooth(data = gapminder,\n   aes(x = gdpPercap, \n       y = lifeExp, \n      color = continent)) \n```\n\n::: {.cell-output-display}\n![](ggplot-presentation_files/figure-revealjs/local-1.png){width=1000}\n:::\n:::\n\n\n\n\n\n\n\n## Global \n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code  code-line-numbers=\"1,2,3,4,5\"}\nggplot(gapminder,\n       aes(x = gdpPercap,\n          y = lifeExp, \n          color = continent))  + \n  geom_point() +\n  geom_smooth() \n```\n\n::: {.cell-output-display}\n![](ggplot-presentation_files/figure-revealjs/gapminder-global-1.png){width=1000}\n:::\n:::\n\n\n\n\n\n:::{.notes}\nSo we have mostly been working inside the individual geoms. However most people do not do this because it can start to get inconvenient quickly. If we work inside each individual geom than the other geom will not know what is going on and ggplot will get confused. \n\nInstead if you pass off our argument to the first layer that the aes argument will inheret the appropriate stuff\n\n:::\n\n\n\n\n\n\n\n\n## Building Plots\n#### Starting with Data and aesthics \n\n\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\nggplot(gapminder,\n aes(x = gdpPercap,\n    y = lifeExp))\n```\n\n::: {.cell-output-display}\n![](ggplot-presentation_files/figure-revealjs/complex-plot-no-geoms-show-1.png){width=1000}\n:::\n:::\n\n\n\n\n\n:::{.notes}\nSo far we have only walked through geoms and aesthics but we need other layers to make graphs that make sense. And are presentable to professional audiences \n\n:::\n\n\n\n\n\n##  Add `geom_point`\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code  code-line-numbers=\"5\"}\nggplot(gapminder,\n    aes(x = gdpPercap,\n        y = lifeExp,\n        color = continent)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](ggplot-presentation_files/figure-revealjs/complex-plot-add-geom-point-show-1.png){width=1000}\n:::\n:::\n\n\n\n\n\n\n\n\n##  Add `geom_smooth`\n\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code  code-line-numbers=\"6\"}\nggplot(gapminder,\n    aes(x = gdpPercap,\n       y = lifeExp,\n       color = continent)) +\n  geom_point() +\n  geom_smooth()\n```\n\n::: {.cell-output-display}\n![](ggplot-presentation_files/figure-revealjs/complex-plot-add-geom-smooth-show-1.png){width=1000}\n:::\n:::\n\n\n\n##  Change Transparency \n\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code  code-line-numbers=\"5\"}\nggplot(gapminder,\n    aes(x = gdpPercap,\n       y = lifeExp,\n       color = continent)) +\n  geom_point(alpha = 0.5) +\n  geom_smooth()\n```\n\n::: {.cell-output-display}\n![](ggplot-presentation_files/figure-revealjs/complex-plot-change-alpha-1.png){width=1000}\n:::\n:::\n\n\n\n\n\n\n## Adjust scales with `scale_x_log10`\n\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code  code-line-numbers=\"7\"}\nggplot(gapminder,\n     aes(x = gdpPercap,\n         y = lifeExp,\n         color = continent)) +\n  geom_point(alpha = 0.5) +\n  geom_smooth() +\n  scale_x_log10()\n```\n\n::: {.cell-output-display}\n![](ggplot-presentation_files/figure-revealjs/complex-plot-add-log-show-1.png){width=1000}\n:::\n:::\n\n\n\n\n\n\n\n\n\n## Add axis labels and title with `labs`\n\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code  code-line-numbers=\"8,9,10\"}\nggplot(gapminder,\n      aes(x = gdpPercap,\n          y = lifeExp,\n          color = continent)) +\n  geom_point(alpha = 0.5) +\n  geom_smooth() +\n  scale_x_log10() +\n  labs(x = \"GDP per cap\",\n       y = \"Life Expectancy\",\n       title = \"The Effect of GDP per cap on Life Expectancy\")\n```\n\n::: {.cell-output-display}\n![](ggplot-presentation_files/figure-revealjs/complex-plot-add-labs-out-1.png){width=1000}\n:::\n:::\n\n\n\n\n:::{.notes}\nLabs can handle a lot of arguments. there are individual functuions for the x label and y label and title. But make your like easier by just using labs. You can also modify the legend in labs but I have various success with that. I tend to modify the legend using guides or theme\n\n:::\n\n## Add viridis color scale\n\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code  code-line-numbers=\"11\"}\nggplot(gapminder,\n      aes(x = gdpPercap,\n          y = lifeExp,\n          color = continent)) +\n  geom_point(alpha = 0.5) +\n  geom_smooth() +\n  scale_x_log10() +\n  labs(x = \"GDP per cap\",\n       y = \"Life Expectanty\",\n       title = \"The Effect of GDP per cap on Life Expectancy\") +\n  scale_color_viridis_d()\n```\n\n::: {.cell-output-display}\n![](ggplot-presentation_files/figure-revealjs/complex-plot-add-viridis-show-1.png){width=1000}\n:::\n:::\n\n\n\n\n\n## Differences in Color Scales \n\n\n\n\n\n\n\n## Add theme\n\n\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code  code-line-numbers=\"12\"}\nggplot(gapminder,\n      aes(x = gdpPercap,\n         y = lifeExp,\n         color = continent)) +\n  geom_point(alpha = 0.5) +\n  geom_smooth() +\n  scale_x_log10() +\n  labs(x = \"GDP per cap\",\n       y = \"Life Expectanty\",\n       title = \"The Effect of GDP per cap on Life Expectancy\") +\n  scale_color_viridis_d() +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](ggplot-presentation_files/figure-revealjs/complex-plot-add-theme-show-1.png){width=1000}\n:::\n:::\n\n\n\n\n\n\n\n\n\n\n## Facet by Continent\n\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code  code-line-numbers=\"13\"}\nggplot(gapminder,\n    aes(x = gdpPercap,\n        y = lifeExp,\n        color = continent)) +\n  geom_point(alpha = 0.5) +\n  geom_smooth() +\n  scale_x_log10() +\n  labs(x = \"GDP per cap\",\n      y = \"Life Expectanty\",\n      title = \"The Effect of GDP per cap on Life Expectancy\") +\n  scale_color_viridis_d() +\n  theme_bw() +\n  facet_wrap(vars(continent))\n```\n\n::: {.cell-output-display}\n![](ggplot-presentation_files/figure-revealjs/complex-plot-facet-show-1.png){width=1000}\n:::\n:::\n\n\n\n\n\n## Change Theme Options\n\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code  code-line-numbers=\"14\"}\nggplot(gapminder,\n  aes(x = gdpPercap,\n      y = lifeExp,\n      color = continent)) +\n  geom_point(alpha = 0.5) +\n  geom_smooth() +\n  scale_x_log10() +\n  labs(x = \"GDP per cap\",\n      y = \"Life Expectanty\",\n      title = \"The Effect of GDP per cap on Life Expectancy\") +\n  scale_color_viridis_d() +\n  theme_bw() +\n  facet_wrap(vars(continent)) +\n  theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](ggplot-presentation_files/figure-revealjs/change-default-theme-option-complex-plot-show-1.png){width=1000}\n:::\n:::\n\n\n\n\n\n\n## Scales\n\n<table>\n  <tr>\n    <th class=\"cell-left\">Example layer</th>\n    <th class=\"cell-left\">What it does</th>\n  </tr>\n  <tr>\n    <td class=\"cell-left\"><code class=\"remark-inline-code\">scale_x_continuous()</code></td>\n    <td class=\"cell-left\">Make the x-axis continuous</td>\n  </tr>\n  <tr>\n    <td class=\"cell-left\"><code class=\"remark-inline-code\">scale_x_continuous(breaks = 1:5)&ensp;</code></td>\n    <td class=\"cell-left\">Manually specify axis ticks</td>\n  </tr>\n  <tr>\n    <td class=\"cell-left\"><code class=\"remark-inline-code\">scale_x_log10()</code></td>\n    <td class=\"cell-left\">Log the x-axis</td>\n  </tr>\n  <tr>\n    <td class=\"cell-left\"><code class=\"remark-inline-code\">scale_color_gradient()</code></td>\n    <td class=\"cell-left\">Use a gradient</td>\n  </tr>\n  <tr>\n    <td class=\"cell-left\"><code class=\"remark-inline-code\">scale_fill_viridis_d()</code></td>\n    <td class=\"cell-left\">Fill with discrete viridis colors</td>\n  </tr>\n</table>\n\n\n:::{.notes}\nOften time we need to or want to adjust the scales that one or more of the axis are on or we pass off color arguments to \n:::\n\n\n\n\n\n## Scales in Action\n\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code  code-line-numbers=\"9\"}\nggplot(gapminder,\n  aes(x = gdpPercap,\n      y = lifeExp,\n      size = pop,\n      color = continent)) +\n  geom_point(alpha = 0.5) +\n  labs(x = \"Income\",\n     y = \"Life Expectancy\") +\n  scale_x_log10(labels = scales::dollar) +\n  theme_bw() \n```\n\n::: {.cell-output-display}\n![](ggplot-presentation_files/figure-revealjs/show-options-for-scales-1.png){width=1000}\n:::\n:::\n\n\n\n\n:::{.notes}\nInstead of directly transforming your data ggplot allows you to do this through the scale_x function which is pretty neat. I will not go through each of them but that is pretty handy. If you want nicer looking labels you can use the scales package to make nicer looking labels. I.e adding commas to values on the x or y axis adding the dollar sign or percentage sign etc\n\n:::\n\n# Scales in Action \n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code  code-line-numbers=\"9,10,11,12\"}\nggplot(gapminder,\n  aes(x = gdpPercap,\n     y = lifeExp,\n     size = pop,\n    color = continent)) +\n  geom_point(alpha = 0.5) +\n  labs(x = \"Income\", y = \"Life Expectancy\") +\n  scale_x_log10(labels = scales::dollar) +\n  scale_color_manual(values = c(\"#04a3bd\",\n     \"#f0be3d\",\n     \"#931e18\",\n     \"#da7901\")) +\n  theme_bw() \n```\n\n::: {.cell-output-display}\n![](ggplot-presentation_files/figure-revealjs/unnamed-chunk-17-1.png){width=1000}\n:::\n:::\n\n\n:::{.notes}\nIf you want to use  a different set of colors you choose those manull\n:::\n\n## Scales in Action \n\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code  code-line-numbers=\"9,10,11,12\"}\nggplot(gapminder,\n  aes(x = gdpPercap,\n     y = lifeExp,\n     size = pop,\n    color = continent)) +\n  geom_point(alpha = 0.5) +\n  labs(x = \"Income\", y = \"Life Expectancy\") +\n  scale_x_log10(labels = scales::dollar) +\n  scale_color_met_d(name = \"Veronese\") +\n  theme_bw() \n```\n\n::: {.cell-output-display}\n![](ggplot-presentation_files/figure-revealjs/unnamed-chunk-18-1.png){width=1000}\n:::\n:::\n\n\n\n## Scales\n\nThe `scale_*()` components control the properties of all the<br><b class='simple-highlight-ylw'>aesthetic dimensions mapped to the data.</b>\n\n<br>The extensions (`*`) can be filled by e.g.:\n\n-   `continuous()`, `discrete()`, `reverse()`, `log10()`, `sqrt()`, `date()` for positions\n\n-   `continuous()`, `discrete()`, `manual()`, `gradient()`, `gradient2()`, `brewer()` for colors\n\n-   `continuous()`, `discrete()`, `manual()`, `ordinal()`, `area()`, `date()` for sizes\n\n-   `continuous()`, `discrete()`, `manual()`, `ordinal()` for shapes\n\n-   `continuous()`, `discrete()`, `manual()`, `ordinal()`, `date()` for transparency\n\n------------------------------------------------------------------------\n\n![Illustration by [Allison Horst](https://github.com/allisonhorst/stats-illustrations)](pics/continuous_discrete.png){fig-size=\"120%\" fig-align=\"center\" fig-alt=\"Allison Horsts illustration ofthe correct use of continuous versus discrete; however, in {ggplot2} these are interpeted in a different way: as quantitative and qualitative.\"}\n\n## Continuous vs. Discrete in {ggplot2}\n\n::: {layout-ncol=\"2\"}\n## Continuous:<br>quantitative or numerical data\n\n-   height\n-   weight\n-   age\n-   counts\n\n## Discrete:<br>qualitative or categorical data\n\n-   species\n-   sex\n-   study sites\n-   age group\n:::\n\n## Continuous vs. Discrete in {ggplot2}\n\n::: {layout-ncol=\"2\"}\n## Continuous:<br>quantitative or numerical data\n\n-   height (continuous)\n-   weight (continuous)\n-   age (continuous or discrete)\n-   counts (discrete)\n\n## Discrete:<br>qualitative or categorical data\n\n-   species (nominal)\n-   sex (nominal)\n-   study site (nominal or ordinal)\n-   age group (ordinal)\n:::\n\n\n## Scales in Action \n\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code  code-line-numbers=\"7\"}\nggplot(gapminder,\n      aes(x = gdpPercap,\n          y = lifeExp,\n          size = pop,\n          color = continent)) +\n  geom_point(alpha = 0.5) +\n  scale_x_continuous(limits = c(0, 30000)) +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](ggplot-presentation_files/figure-revealjs/scale-x-continous-example-1.png){width=1000}\n:::\n:::\n\n\n\n\n\n\n\n\n:::{.notes}\nIn some cases you may want to change the coordinates of the plot to expand or contract the coordinates or in some cases just flip them without hassle. ggplot defaults to using coord_cartesian on its own but coord_cartesian can be used to zoom in on part of the plot. The coor_flip here is a bit silly but it is insanely useful for barcharts and other charts where you may have added things into aes and don't want to go back and redo it\n\n:::\n\n## Coordinates\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code  code-line-numbers=\"6\"}\nggplot(gapminder,\n    aes(x = gdpPercap,\n     y = lifeExp)) +\n  geom_point(alpha = 0.5) +\n  scale_x_continuous(limits = c(0, 30000)) +\n  coord_flip() +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](ggplot-presentation_files/figure-revealjs/unnamed-chunk-19-1.png){width=1000}\n:::\n:::\n\n\n\n\n\n\n## Your Turn \n### Change the colors of this density plot\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](ggplot-presentation_files/figure-revealjs/fill-your-turn-option-example-1.png){fig-align='center' width=1600}\n:::\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"countdown\" id=\"timer_c81578c6\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">04</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n:::\n:::\n\n\n\n:::{.notes}\nlook at the help file for scale_fill_viridis and play around with the options \n\n:::\n\n\n## How I Did It\n\n\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\nggplot(penguins,\n aes(x = bill_length_mm,\n    fill = species)) +\n  geom_density( alpha = 0.75) +\n  theme_bw() +\n  scale_fill_viridis_d(option = \"magma\")\n```\n\n::: {.cell-output-display}\n![](ggplot-presentation_files/figure-revealjs/changing-viridis-options-show-1.png){width=1000}\n:::\n:::\n\n\n\n\n\n\n\n\n## Facets\n\n<table>\n  <tr>\n    <th class=\"cell-left\">Example layer</th>\n    <th class=\"cell-left\">What it does</th>\n  </tr>\n  <tr>\n    <td class=\"cell-left\"><code class=\"remark-inline-code\">facet_wrap(vars(continent))</code></td>\n    <td class=\"cell-left\">Plot for each continent</td>\n  </tr>\n  <tr>\n    <td class=\"cell-left\"><code class=\"remark-inline-code\">facet_wrap(vars(continent, year))</code>&emsp;</td>\n    <td class=\"cell-left\">Plot for each continent/year</td>\n  </tr>\n  <tr>\n    <td class=\"cell-left\"><code class=\"remark-inline-code\">facet_wrap(..., ncol = 1)</code></td>\n    <td class=\"cell-left\">Put all facets in one column</td>\n  </tr>\n  <tr>\n    <td class=\"cell-left\"><code class=\"remark-inline-code\">facet_wrap(..., nrow = 1)</code></td>\n    <td class=\"cell-left\">Put all facets in one row</td>\n  </tr>\n</table>\n\n\n\n\n\n\n## facet_wrap\n\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code  code-line-numbers=\"8\"}\nggplot(gapminder,\n  aes(x = gdpPercap,\n     y = lifeExp,\n     size = pop)) +\n  geom_point(alpha = 0.5) +\n  theme_bw() +\n  scale_x_log10() +\n  facet_wrap(vars(continent)) \n```\n\n::: {.cell-output-display}\n![](ggplot-presentation_files/figure-revealjs/facet-wrap-one-col-1.png){width=1000}\n:::\n:::\n\n\n:::{.notes}\nIf we want to get individual plots for each value of the variable we can feed this to facet wrap and is a really useful way of displaying information and saves you from creating subsets for each continent than plotting them individuall than combining them. You also have lots of \n\n\n:::\n\n\n\n## facet_grid \n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code  code-line-numbers=\"9\"}\nggplot(data = filter(gapminder,\n year %in% c(1987,1997,2002, 2007)),\n    aes(x = gdpPercap,\n     y = lifeExp,\n     size = pop)) +\n  geom_point(alpha = 0.5) +\n  theme_bw() +\n  scale_x_log10() +\n  facet_grid(vars(year))\n```\n\n::: {.cell-output-display}\n![](ggplot-presentation_files/figure-revealjs/unnamed-chunk-20-1.png){width=1000}\n:::\n:::\n\n\n:::{.notes}\nforms a matrix of panels defined by row and column faceting variables. It is most useful when you have two discrete variables, and all combinations of the variables exist in the data.\n\n:::\n\n\n## facet_grid\n\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code  code-line-numbers=\"9\"}\nggplot(data = filter(gapminder,\n year %in% c(1987,1997,2002, 2007)),\n    aes(x = gdpPercap,\n     y = lifeExp,\n     size = pop)) +\n  geom_point(alpha = 0.5) +\n  theme_bw() +\n  scale_x_log10() +\n  facet_grid(vars(year), vars(continent))\n```\n\n::: {.cell-output-display}\n![](ggplot-presentation_files/figure-revealjs/unnamed-chunk-21-1.png){width=1000}\n:::\n:::\n\n\n\n\n\n\n\n## Labels\n\n<table>\n  <tr>\n    <th class=\"cell-left\">Example layer</th>\n    <th class=\"cell-left\">What it does</th>\n  </tr>\n  <tr>\n    <td class=\"cell-left\"><code class=\"remark-inline-code\">labs(title = \"Neat title\")</code></td>\n    <td class=\"cell-left\">Title</td>\n  </tr>\n  <tr>\n    <td class=\"cell-left\"><code class=\"remark-inline-code\">labs(caption = \"Something\")</td>\n    <td class=\"cell-left\">Caption</td>\n  </tr>\n  <tr>\n    <td class=\"cell-left\"><code class=\"remark-inline-code\">labs(y = \"Something\")</td>\n    <td class=\"cell-left\">y-axis</td>\n  </tr>\n  <tr>\n    <td class=\"cell-left\"><code class=\"remark-inline-code\">labs(size = \"Population\")</code></td>\n    <td class=\"cell-left\">Title of size legend</td>\n  </tr>\n</table>\n\n\n\n\n\n\n\n## Labels with labs \n\n\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code  code-line-numbers=\"8,9,10,11,12,13,14\"}\nggplot(gapminder, \n       aes(x = gdpPercap,\n        y = lifeExp, \n        color = continent,\n        size = pop)) +\n geom_point(alpha = 0.5) +\n  scale_x_log10() +\n  labs(title = \"Health and wealth grow together\",\n       subtitle = \"Data from 2007\",\n       x = \"Wealth (GDP per capita)\",\n       y = \"Health (life expectancy)\",\n       color = \"Continent\",\n       size = \"Population\",\n       caption = \"Source: The Gapminder Project\")\n```\n\n::: {.cell-output-display}\n![](ggplot-presentation_files/figure-revealjs/labels-example-show-1.png){width=1000}\n:::\n:::\n\n\n\n:::{.notes}\nThe labs argument has a ton of flexibility. Basically if you feed something into aes you can change it in labs. I Tend to change legend labels in guides. That is just a personal preference but labs is superflexible. You will sometimes see other solutions for changing your legend.\n\n:::\n\n\n## Changing the Default Theme \n\n::::{.columns}\n::: {.column width=\"45%\"}\n\n### theme_minimal\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](ggplot-presentation_files/figure-revealjs/theme-minimal-theme-out-1.png){width=1000}\n:::\n:::\n\n\n\n:::\n\n\n::: {.column width=\"45%\"}\n\n### theme_dark\n\n::: {.cell}\n::: {.cell-output-display}\n![](ggplot-presentation_files/figure-revealjs/theme-dark-theme-out-1.png){width=1000}\n:::\n:::\n\n\n:::\n::::\n\n\n\n## The theme argument \n\n- Has lots and lots of options(94 to be exact)\n\n- You can change basically anything you could think of in a plot\n  - My ggplot theme is basically just a some tweaks to theme arguments\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntheme_bw() + \ntheme(legend.position = \"bottom\",\n      plot.title = element_text(face = \"bold\"),\n      axis.title.y = element_text(face = \"italic\"))\n```\n:::\n\n\n\n\n\n\n\n## Saving your work \n\n\n::: {.cell}\n\n```{.r .cell-code}\nyour_plot_here = ggplot(data, aes(x = blah, y = blah))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggsave(\"name-of-your-file.pdf\",your_plot_here) \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggsave(\"name-of-your-file.pngs\",your_plot_here)\n```\n:::\n\n\n\n\n\n# Making Maps {background-color=\"#b64f32\" .white}\n\n\n\n\n\n\n## New Packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(c(\"sf\", \"tidygeocoder\"))\ndevtools::install_github(\"ropenscilabs/rnaturalearth\")\nlibrary(rnaturalearth)\nlibrary(sf)\n```\n:::\n\n\n- If you are on a Mac please go to the [r-spatial-website](https://r-spatial.github.io/sf/) if you run into problems\n\n- The workhorse for this particular section will be `sf`\n\n:::aside\n\nThere are some other packages like geom_map and ggmap. They still work but sf(simple features) is really great and has a ton of support and resources. \nSee [this book](https://geocompr.robinlovelace.net/)\n:::\n\n\n:::{.notes}\nThere are lots of mapping packages in R. I will only show you how to map in ggplot. You can get a really passable map in ggplot. I have included the code the Emre wrote that uses tmap. tmap is good and I have used it but once you get the hand of ggplot I think it is just easier to use ggplot than to learn how to use a new package\n\n:::\n\n## Mapping in R \n\n- R and ggplot can get you pretty far \n\n- The stuff from these workshops broadly apply \n  - including your dplyr verbs\n\n- Lots of your needs to make *static* maps can be met\n\n- Depending on what you are doing you may have to wait a bit\n\n\n\n\n## Map Made By Kieran Healy \n\n\n::: {.cell}\n::: {.cell-output-display}\n![](https://raw.githubusercontent.com/andrewheiss/datavizs21.classes.andrewheiss.com/main/static/slides/img/12/streams-lakes-bw-100-w-01.jpg)\n:::\n:::\n\n\n\n\n\n\n\n## Shape Files \n\n- To read in shape files you use `read_sf` you should see something that looks like this! \n\n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> NAME </th>\n   <th style=\"text-align:left;\"> geometry </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> Mordor </td>\n   <td style=\"text-align:left;\"> POINT (1330373 596482.5) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Hobbiton </td>\n   <td style=\"text-align:left;\"> POINT (515948 1043820) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Edoras </td>\n   <td style=\"text-align:left;\"> POINT (853993.3 723854.1) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Rivendell </td>\n   <td style=\"text-align:left;\"> POINT (884331.5 1057787) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Minas Tirith </td>\n   <td style=\"text-align:left;\"> POINT (1111425 621234.6) </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n:::{.notes}\nWhen you download a shapefile you will get lots and lots of stuff. Lots of the shapefiles that you encounter in the wild are maintained by governments so keep those in the working directory. I will get to how to read in shape files in a minute. But when you read them into R the only thing that changes from your usual dataframe, tibble, data.table etc is that you will get a column in your dataset called geometry. This is just a list of things that delineate boundaries. for smaller countries like Fiji the number of boundaries are going to be smaller than say larger countries by area. It doesnt make sense to us but it makes sense to R \n:::\n\n\n\n\n## Making Maps in ggplot\n\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\n## devtools::install_github(\"ropenscilabs/rnaturalearth\")\nlibrary(rnaturalearth)\n\nworld_map_ne = ne_states(returnclass = \"sf\")\n\nggplot() +\n  geom_sf(data = world_map_ne)\n```\n\n::: {.cell-output-display}\n![](ggplot-presentation_files/figure-revealjs/basic-map-1.png){width=1000}\n:::\n:::\n\n\n\n\n\n\n:::{.notes}\nas you can see nothing really fundamentally changes when you are making maps in ggplot. It is no different fundamentally than making a scatter plot or any other kind of plot here we are just feeding data to geom_sf \n\n:::\n\n## Changing the Projections\n\n\n\n::: {.cell output-location='column' hash='ggplot-presentation_cache/revealjs/gall-peters-projection_1415dc2e225095f4e13e6367c045f2af'}\n\n```{.r .cell-code}\nggplot() +\n  geom_sf(data = world_map_ne) + \n  coord_sf(crs = \"+proj=cea +lon_0=0 +lat_ts=45\") +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](ggplot-presentation_files/figure-revealjs/gall-peters-projection-1.png){width=1000}\n:::\n:::\n\n\n\n\n\n:::{.notes}\nYou can really easily change the projections you want. Here we are just feeding it a different projections If you ever watched the west wing you may recognize this particular projection\n\n:::\n\n\n\n## Working Without Shape Files(kind of)\n\n- As is the case sometimes we do not have a shape file\n\n\n- Don't worry `sf` has you covered \n\n- You just need to feed it the right things\n\n\n\n\n## Making a Bespoke Shapefile \n\n- You can either feed it latitude and longitudes \n\n- Or you can feed it addresses\n\n- Most free ones have rate limits\n  - So be mindful of the size of your data\n\n\n:::{.notes}\nIn this case if we do not have the geometry column but we have some addresses we can just geocode them to produce the column.\n\n:::\n\n\n## Making a Bespoke Shapefile(cont)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nga_cities = tribble( \n  ~city, ~lat, ~long,\n  \"Atlanta\", 33.748955, -84.388099,\n  \"Athens\", 33.950794, -83.358884,\n  \"Savannah\", 32.113192, -81.089350\n)\n\n\nga_cities_geometry = ga_cities |>  \n  st_as_sf(coords = c(\"long\", \"lat\"), crs = st_crs(\"EPSG:4326\"))\nga_cities_geometry\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> city </th>\n   <th style=\"text-align:left;\"> geometry </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> Atlanta </td>\n   <td style=\"text-align:left;\"> POINT (-84.3881 33.74896) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Athens </td>\n   <td style=\"text-align:left;\"> POINT (-83.35888 33.95079) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Savannah </td>\n   <td style=\"text-align:left;\"> POINT (-81.08935 32.11319) </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n\n\n\n\n\n\n\n:::aside\nexamples derived from Andrew Heiss\n:::\n\n\n\n\n## Making a Bespoke Shapefile(cont)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidygeocoder)\n\nbreweries_I_visit = tribble(\n  ~name, ~address,\n  \"Russian River Brewing\", \"725 4th St, Santa Rosa, CA 95404\",\n  \"Orpheus Brewing\", \"1440 Dutch Valley Pl NE, Atlanta, GA 30324\",\n  \"Three Tavens\", \"121 New St, Decatur, GA 30030\",\n  \"HenHouse Brewing Company\", \"322 Bellevue Ave, Santa Rosa, CA 95407\"\n)\n\nbreweries_geocode = breweries_I_visit |> \n  geocode(address, method = \"osm\") ## backup if one service fails \n\nadd_geom = breweries_geocode |> \n  st_as_sf(coords = c(\"long\", \"lat\"), crs = st_crs(\"EPSG:4326\"))\n```\n:::\n\n::: {.cell hash='ggplot-presentation_cache/revealjs/unnamed-chunk-25_65b5baf6670f8c35818ca01f4918c49f'}\n::: {.cell-output-display}\n`````{=html}\n<table>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> name </th>\n   <th style=\"text-align:left;\"> address </th>\n   <th style=\"text-align:left;\"> geometry </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> Russian River Brewing </td>\n   <td style=\"text-align:left;\"> 725 4th St, Santa Rosa, CA 95404 </td>\n   <td style=\"text-align:left;\"> POINT (-122.7117 38.4418) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Orpheus Brewing </td>\n   <td style=\"text-align:left;\"> 1440 Dutch Valley Pl NE, Atlanta, GA 30324 </td>\n   <td style=\"text-align:left;\"> POINT (-84.36874 33.79355) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Three Tavens </td>\n   <td style=\"text-align:left;\"> 121 New St, Decatur, GA 30030 </td>\n   <td style=\"text-align:left;\"> POINT (-84.28488 33.77306) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> HenHouse Brewing Company </td>\n   <td style=\"text-align:left;\"> 322 Bellevue Ave, Santa Rosa, CA 95407 </td>\n   <td style=\"text-align:left;\"> POINT (-122.7255 38.40122) </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n\n:::{.notes}\nin the geocode argument you can cascade the services just in case it fails. The neat thing is that you can feed it a dataframe of addresses. What is also pretty cool is that it plays really well with other R tidyverse packages so if you scrape a website to grab a ton of addresses than you can just feed it into tidygeocoder \n\n\nfrom there you can use ggplot or even create interactive leaflet maps \n\n:::\n\n\n\n\n## Mapping Middle Earth\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\ncoastline = read_sf(\"data/ME-GIS/Coastline2.shp\")\ncontours = read_sf(\"data/ME-GIS/Contours_18.shp\")\nrivers = read_sf(\"data/ME-GIS/Rivers.shp\")\nlakes = read_sf(\"data/ME-GIS/Lakes.shp\")\nforests = read_sf(\"data/ME-GIS/Forests.shp\")\nmountains = read_sf(\"data/ME-GIS/Mountains_Anno.shp\")\nplacenames = read_sf(\"data/ME-GIS/Combined_Placenames.shp\")\ncities = read_sf(\"data/ME-GIS/Cities.shp\")\nroads = read_sf(\"data/ME-GIS/Roads.shp\")\ntowers_keeps =  read_sf(\"data/ME-GIS/Towers_and_Keeps.shp\")\nplaces = placenames |>\n  filter(NAME %in% c(\"Hobbiton\",\n                     \"Rivendell\",\n                     \"Edoras\",\n                     \"Minas Tirith\"))\n\nmordor = placenames[placenames$NAME == \"Mordor\",]\n\nmountains_to_label = mountains[mountains$name == \"Erebor The Lonely Mountain\",]\n\nggplot() +\n  geom_sf(data = contours,\n          size = 0.15,\n          color = \"grey90\") +\n  geom_sf(data = coastline,\n          size = 0.25,\n          color = \"grey50\") +\n  geom_sf(data = rivers,\n          size = 0.2,\n          color = \"#0776e0\",\n          alpha = 0.5) +\n  geom_sf(data = lakes,\n          size = 0.2,\n          color = \"#0776e0\",\n          fill = \"#0776e0\") +\n  geom_sf(data = forests,\n          size = 0,\n          fill = \"#035711\",\n          alpha = 0.5) +\n  geom_sf(data = mountains, size = 0.25) +\n  geom_sf(data = places) +\n  geom_sf_label(data = places,\n                aes(label = NAME),\n                nudge_y = 80000, size = 24) +\n  geom_sf_label(data = mountains_to_label,\n                aes(label = name),\n                nudge_y = 80000, size = 24) +\n  geom_sf_label(data = mordor,\n                aes(label = NAME),\n                nudge_y = 9000, size = 24) +\n  theme_void() +\n  theme(plot.background = element_rect(fill = \"#fffce3\"))\n```\n\n::: {.cell-output-display}\n![](ggplot-presentation_files/figure-revealjs/unnamed-chunk-26-1.png){width=1000}\n:::\n:::\n\n\n\n:::{.notes}\nAs you can see this does not look fundamentally all that different from the rest of our ggplot code. We are just coloring and sizing ssutff depening on what we want. We can add annotations \n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/countdown-0.4.0/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    function fireSlideChanged(previousSlide, currentSlide) {\n\n      // dispatch for htmlwidgets\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for reveal\n    if (window.Reveal) {\n      window.Reveal.addEventListener(\"slidechanged\", function(event) {\n        fireSlideChanged(event.previousSlide, event.currentSlide);\n      });\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}